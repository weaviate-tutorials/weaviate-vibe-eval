{
  "openai/gpt-4o-2024-11-20": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:17:13.661370",
      "duration": 4.027323007583618,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "Here's the Python code to connect to a Weaviate Cloud instance using the latest Weaviate client syntax and environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`. The code also checks if the server is ready to accept requests:\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Ensure the environment variables are set\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set.\")\n\n# Connect to Weaviate Cloud instance\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": WCD_TEST_KEY  # Optional, depending on your setup\n    }\n)\n\n# Check if the server is ready\nif client.is_ready():\n    print(\"Weaviate server is ready to accept requests.\")\nelse:\n    print(\"Weaviate server is not ready. Please check your connection or credentials.\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the `WCD_TEST_URL` and `WCD_TEST_KEY` from environment variables using `os.getenv`.\n2. **Client Initialization**: The `weaviate.Client` is initialized with the URL and API key for authentication using `weaviate.AuthApiKey`.\n3. **Server Readiness Check**: The `client.is_ready()` method checks if the Weaviate server is ready to accept requests and prints the appropriate message.\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running this script.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:13: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 13, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:17:18.813285",
      "duration": 5.143131971359253,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "Here is the Python code using the latest Weaviate client syntax to connect to a Weaviate Cloud instance using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, and then checking if the server is ready to accept requests:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Retrieve environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Ensure the environment variables are set\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set.\")\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=AuthApiKey(WCD_TEST_KEY)\n)\n\n# Check if the server is ready\nassert client.is_ready(), \"Weaviate server is not ready.\"\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**: The `os.getenv` function retrieves the values of `WCD_TEST_URL` and `WCD_TEST_KEY` from the environment.\n2. **Validation**: A check ensures that both environment variables are set; otherwise, an error is raised.\n3. **Connection**: The `weaviate.Client` is initialized with the `url` and `auth_client_secret` parameters. The `AuthApiKey` class is used to authenticate with the API key.\n4. **Readiness Check**: The `client.is_ready()` method verifies that the Weaviate server is ready to accept requests.\n5. **Cleanup**: The `client.close()` method ensures the connection is properly closed after the check.\n\nThis code does nothing beyond connecting to the Weaviate Cloud instance, checking readiness, and closing the connection.",
      "stdout": "",
      "stderr": "/code/code.py:14: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 14, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "zero_shot_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:17:31.054464",
      "duration": 12.23222017288208,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "Here is the Python code to create the `DemoProducts` collection in Weaviate using the latest Weaviate client syntax. The code connects to the Weaviate Cloud instance using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`. If the collection already exists, it deletes it first.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.exceptions import WeaviateBaseError\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Ensure the environment variables are set\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    additional_headers={\n        \"Authorization\": f\"Bearer {WCD_TEST_KEY}\"\n    }\n)\n\n# Define the class schema for DemoProducts\ndemo_products_schema = {\n    \"class\": \"DemoProducts\",\n    \"description\": \"A collection of demo products\",\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n            \"description\": \"The name of the product\"\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n            \"description\": \"A description of the product\"\n        },\n        {\n            \"name\": \"price\",\n            \"dataType\": [\"number\"],\n            \"description\": \"The price of the product\"\n        },\n        {\n            \"name\": \"in_stock\",\n            \"dataType\": [\"boolean\"],\n            \"description\": \"Whether the product is in stock\"\n        }\n    ]\n}\n\n# Check if the class already exists, and delete it if it does\ntry:\n    if client.schema.exists(\"DemoProducts\"):\n        print(\"Class 'DemoProducts' already exists. Deleting it...\")\n        client.schema.delete_class(\"DemoProducts\")\n        print(\"Class 'DemoProducts' deleted.\")\nexcept WeaviateBaseError as e:\n    print(f\"Error while checking or deleting existing class: {e}\")\n    raise\n\n# Create the new class\ntry:\n    print(\"Creating class 'DemoProducts'...\")\n    client.schema.create_class(demo_products_schema)\n    print(\"Class 'DemoProducts' created successfully.\")\nexcept WeaviateBaseError as e:\n    print(f\"Error while creating class: {e}\")\n    raise\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud instance URL (`WCD_TEST_URL`) and API key (`WCD_TEST_KEY`) from environment variables.\n2. **Weaviate Client**: It connects to the Weaviate Cloud instance using the `weaviate.Client` class and includes the API key in the `Authorization` header.\n3. **Schema Definition**: The `demo_products_schema` dictionary defines the `DemoProducts` class with the specified properties (`name`, `description`, `price`, and `in_stock`).\n4. **Check and Delete Existing Class**: The `client.schema.exists(\"DemoProducts\")` method checks if the class already exists. If it does, the `client.schema.delete_class(\"DemoProducts\")` method deletes it.\n5. **Create Class**: The `client.schema.create_class(demo_products_schema)` method creates the new class.\n\n### Prerequisites:\n- Install the Weaviate Python client using `pip install weaviate-client`.\n- Set the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables in your environment.\n\nLet me know if you need further assistance!",
      "stdout": "",
      "stderr": "/code/code.py:14: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 14, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:17:43.854446",
      "duration": 12.789485931396484,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "The example code you provided is not entirely accurate for the latest Weaviate Python client syntax. Below is the corrected and updated Python code to achieve your goal using the latest Weaviate client syntax as of October 2023:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Connect to the Weaviate Cloud instance\nauth_config = AuthApiKey(api_key=WCD_TEST_KEY)\nclient = weaviate.Client(url=WCD_TEST_URL, auth_client_secret=auth_config)\n\n# Define the collection (class) name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists\nif client.schema.exists(collection_name):\n    client.schema.delete_class(collection_name)\n    print(f\"Deleted existing collection: {collection_name}\")\n\n# Define the schema for the collection\ncollection_schema = {\n    \"class\": collection_name,\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"price\",\n            \"dataType\": [\"number\"],\n        },\n        {\n            \"name\": \"in_stock\",\n            \"dataType\": [\"boolean\"],\n        },\n    ],\n}\n\n# Create the collection\nclient.schema.create_class(collection_schema)\nprint(f\"Created collection: {collection_name}\")\n\n# Close the client connection (optional, as the client is stateless)\nclient.close()\n```\n\n### Explanation of the Code:\n1. **Environment Variables**:\n   - The `WCD_TEST_URL` and `WCD_TEST_KEY` are loaded from environment variables using `os.getenv`.\n\n2. **Authentication**:\n   - The `AuthApiKey` class is used to authenticate with the Weaviate Cloud instance using the API key.\n\n3. **Check and Delete Existing Collection**:\n   - The `client.schema.exists(collection_name)` method checks if the collection (class) already exists.\n   - If it exists, the `client.schema.delete_class(collection_name)` method deletes it.\n\n4. **Define Schema**:\n   - The schema for the collection is defined as a dictionary with the class name and its properties.\n   - Each property has a `name` and a `dataType`. The data types are specified as lists (e.g., `[\"text\"]`, `[\"number\"]`, `[\"boolean\"]`).\n\n5. **Create Collection**:\n   - The `client.schema.create_class(collection_schema)` method creates the collection with the specified schema.\n\n6. **Close Connection**:\n   - The `client.close()` method is optional since the Weaviate client is stateless, but it is included for completeness.\n\n### Prerequisites:\n- Install the Weaviate Python client library:\n  ```bash\n  pip install weaviate-client\n  ```\n- Ensure the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables are set with the correct values.\n\nThis code will create the `DemoProducts` collection with the specified properties in your Weaviate Cloud instance. If the collection already exists, it will be deleted and recreated.",
      "stdout": "",
      "stderr": "/code/code.py:11: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(url=WCD_TEST_URL, auth_client_secret=auth_config)\nTraceback (most recent call last):\n  File \"/code/code.py\", line 11, in <module>\n    client = weaviate.Client(url=WCD_TEST_URL, auth_client_secret=auth_config)\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "extensive_examples_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:17:52.946339",
      "duration": 9.083813905715942,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Below is the Python code to create a collection named `DemoProducts` with the specified properties, using the latest Weaviate client syntax. The code connects to a Weaviate Cloud instance using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`. If the collection already exists, it deletes it first.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n)\n\n# Define the collection name\ncollection_name = \"DemoProducts\"\n\n# Check if the collection already exists\nif client.collections.exists(collection_name):\n    print(f\"Collection '{collection_name}' already exists. Deleting it...\")\n    client.collections.delete(collection_name)\n    print(f\"Collection '{collection_name}' deleted.\")\n\n# Create the new collection with the specified properties\nprint(f\"Creating collection '{collection_name}'...\")\nclient.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),  # Optional: Use OpenAI vectorizer\n)\n\nprint(f\"Collection '{collection_name}' created successfully.\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Connection to Weaviate Cloud**:\n   - The `connect_to_weaviate_cloud` method is used to connect to the Weaviate Cloud instance.\n   - The `cluster_url` and `auth_credentials` are fetched from the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n\n2. **Check and Delete Existing Collection**:\n   - The `client.collections.exists(collection_name)` method checks if the collection already exists.\n   - If it exists, the `client.collections.delete(collection_name)` method deletes the collection.\n\n3. **Create the Collection**:\n   - The `client.collections.create` method creates the `DemoProducts` collection with the specified properties:\n     - `name` (text property)\n     - `description` (text property)\n     - `price` (number property)\n     - `in_stock` (boolean property)\n   - The `vectorizer_config` is set to `text2vec_openai()` to enable OpenAI vectorization for text properties.\n\n4. **Close the Client**:\n   - The `client.close()` method ensures the connection to the Weaviate instance is properly closed.\n\n### Notes:\n- If you do not want to use the OpenAI vectorizer, you can remove the `vectorizer_config` parameter or replace it with another vectorizer configuration.\n- Ensure that the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set correctly before running the script.",
      "stdout": "Collection 'DemoProducts' already exists. Deleting it...\nCollection 'DemoProducts' deleted.\nCreating collection 'DemoProducts'...\nCollection 'DemoProducts' created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "zero_shot_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:18:09.992423",
      "duration": 16.29427218437195,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "Here's the Python code to achieve the described functionality using the latest Weaviate client syntax:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.exceptions import WeaviateStartUpError\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Validate environment variables\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set.\")\n\n# Connect to Weaviate Cloud\ntry:\n    client = weaviate.Client(\n        url=WCD_TEST_URL,\n        auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n        additional_headers={\"X-OpenAI-Api-Key\": WCD_TEST_KEY},  # Optional, if using OpenAI module\n    )\nexcept WeaviateStartUpError as e:\n    print(f\"Failed to connect to Weaviate: {e}\")\n    exit(1)\n\n# Define the schema for the \"DemoProducts\" collection\nschema = {\n    \"class\": \"DemoProducts\",\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n        },\n    ],\n}\n\n# Add the schema to Weaviate if it doesn't already exist\nif not client.schema.contains(schema):\n    client.schema.create_class(schema)\n\n# Prepare 50 objects for batch import\nobjects = [\n    {\n        \"name\": f\"Product {i}\",\n        \"description\": f\"Description {i}\",\n    }\n    for i in range(1, 51)\n]\n\n# Batch import the objects\nwith client.batch as batch:\n    batch.batch_size = 10  # Set batch size\n    for obj in objects:\n        batch.add_data_object(obj, \"DemoProducts\")\n\n# Wait for the batch process to complete\nbatch.flush()\n\n# Count the number of objects in the \"DemoProducts\" collection\nresult = client.query.aggregate(\"DemoProducts\").with_meta_count().do()\ncount = result[\"data\"][\"Aggregate\"][\"DemoProducts\"][0][\"meta\"][\"count\"]\n\n# Print the number of objects in the collection\nprint(f\"Number of objects in 'DemoProducts': {count}\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the `WCD_TEST_URL` and `WCD_TEST_KEY` from environment variables. These are used to connect to the Weaviate Cloud instance.\n2. **Schema Definition**: The schema for the `DemoProducts` collection is defined with two properties: `name` and `description`, both of type `text`.\n3. **Schema Creation**: The schema is added to Weaviate only if it doesn't already exist.\n4. **Batch Import**: 50 objects are created with arbitrary values for `name` and `description`. These objects are then imported into the `DemoProducts` collection in batches of 10.\n5. **Count Objects**: The `aggregate` query is used to count the number of objects in the `DemoProducts` collection.\n6. **Output**: The total number of objects in the collection is printed.\n\n### Prerequisites:\n- Install the Weaviate Python client: `pip install weaviate-client`.\n- Set the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables before running the script.\n\nLet me know if you need further assistance!",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:15: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 15, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:18:23.247330",
      "duration": 12.64745807647705,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "Below is the Python code to achieve the task you described. It uses the latest Weaviate client syntax to connect to a Weaviate Cloud instance, create a collection named `DemoProducts`, batch import 50 objects, and print the number of objects in the collection.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=AuthApiKey(WCD_TEST_KEY),\n    additional_headers={\"X-OpenAI-Api-Key\": WCD_TEST_KEY},  # Optional, if using OpenAI module\n)\n\n# Define the schema for the \"DemoProducts\" collection\nschema = {\n    \"class\": \"DemoProducts\",\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n        },\n    ],\n}\n\n# Create the collection if it doesn't exist\nif not client.schema.contains(schema):\n    client.schema.create_class(schema)\n\n# Prepare 50 objects to batch import\ndata_rows = [\n    {\n        \"name\": f\"Product {i+1}\",\n        \"description\": f\"Description {i+1}\",\n    }\n    for i in range(50)\n]\n\n# Batch import the objects\nwith client.batch as batch:\n    batch.batch_size = 10  # Set batch size\n    for data_row in data_rows:\n        batch.add_data_object(\n            data_object=data_row,\n            class_name=\"DemoProducts\",\n        )\n    if batch.errors:\n        print(\"Batch import encountered errors.\")\n        for error in batch.errors:\n            print(error)\n\n# Count the number of objects in the \"DemoProducts\" collection\nresult = client.query.aggregate(\"DemoProducts\").with_meta_count().do()\nobject_count = result[\"data\"][\"Aggregate\"][\"DemoProducts\"][0][\"meta\"][\"count\"]\n\nprint(f\"Number of objects in the 'DemoProducts' collection: {object_count}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation of the Code:\n1. **Environment Variables**: The `WCD_TEST_URL` and `WCD_TEST_KEY` are loaded from environment variables to connect to the Weaviate Cloud instance.\n2. **Schema Definition**: The schema for the `DemoProducts` collection is defined with two properties: `name` and `description`, both of type `text`.\n3. **Schema Creation**: The schema is created only if it doesn't already exist in the Weaviate instance.\n4. **Batch Import**: 50 objects are prepared and imported in batches of 10 using the `client.batch` context manager.\n5. **Error Handling**: Errors during the batch import are printed if they occur.\n6. **Object Count**: The total number of objects in the `DemoProducts` collection is retrieved using an aggregate query with `meta.count`.\n7. **Client Closure**: The connection to the Weaviate instance is closed at the end.\n\n### Prerequisites:\n- Install the Weaviate Python client: `pip install weaviate-client`.\n- Set the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables with the appropriate values for your Weaviate Cloud instance.\n\nLet me know if you need further assistance!",
      "stdout": "",
      "stderr": "/code/code.py:10: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "extensive_examples_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:18:32.356546",
      "duration": 8.509175777435303,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is the Python code to achieve the task you described. It uses the latest Weaviate Python client syntax to create a collection named `DemoProducts`, add objects to it, and print the number of objects in the collection:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n)\n\n# Create the \"DemoProducts\" collection if it doesn't already exist\nif not client.collections.exists(\"DemoProducts\"):\n    client.collections.create(\n        \"DemoProducts\",\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT),\n        ],\n        vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    )\n\n# Batch import 50 objects into the \"DemoProducts\" collection\ncollection = client.collections.get(\"DemoProducts\")\nwith collection.batch.dynamic() as batch:\n    for i in range(50):\n        batch.add_object(\n            properties={\n                \"name\": f\"Product {i}\",\n                \"description\": f\"Description {i}\",\n            }\n        )\n\n# Print the number of objects in the collection\nnum_objects = collection.query.count()\nprint(f\"Number of objects in 'DemoProducts': {num_objects}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Connection to Weaviate Cloud**:\n   - The `connect_to_weaviate_cloud` method is used to connect to the Weaviate Cloud instance using the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables.\n\n2. **Collection Creation**:\n   - The `DemoProducts` collection is created with two properties: `name` and `description`, both of type `TEXT`.\n   - The `text2vec_openai` vectorizer is used for semantic search capabilities.\n\n3. **Batch Import**:\n   - A dynamic batch is used to import 50 objects into the `DemoProducts` collection. Each object has a `name` and a `description` property.\n\n4. **Count Objects**:\n   - The `query.count()` method is used to retrieve the total number of objects in the `DemoProducts` collection.\n\n5. **Close Connection**:\n   - The `client.close()` method ensures the connection to the Weaviate instance is properly closed.\n\n### Prerequisites:\n- Ensure the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables are set with the correct values for your Weaviate Cloud instance.\n- Install the latest version of the Weaviate Python client:\n  ```bash\n  pip install weaviate-client\n  ```\n\nLet me know if you need further assistance!",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 8, in <module>\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute Auth\n",
      "exit_code": 1
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:18:49.472358",
      "duration": 16.55771017074585,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Here is the Python code to query the `WineReview` collection in Weaviate Cloud using the latest Weaviate client syntax. This code connects to the Weaviate Cloud instance using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, and queries for wines that best match the query \"dessert wine\" with a limit of 2 results.\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\n\n# Validate environment variables\nif not weaviate_url or not weaviate_api_key or not openai_api_key:\n    raise ValueError(\"Please ensure WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are set in the environment variables.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=weaviate.AuthApiKey(api_key=weaviate_api_key),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key  # Pass the OpenAI API key for text2vec-openai\n    }\n)\n\n# Query the WineReview collection\nquery = \"dessert wine\"\nresponse = client.query.get(\n    \"WineReview\",  # The class name\n    [\"title\", \"country\", \"price\", \"points\"]  # The properties to retrieve\n).with_near_text({\n    \"concepts\": [query]\n}).with_limit(2).do()\n\n# Check for errors in the response\nif \"errors\" in response:\n    print(\"Error:\", response[\"errors\"])\nelse:\n    # Print the results\n    results = response.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", [])\n    for wine in results:\n        print(f\"Title: {wine.get('title')}\")\n        print(f\"Country: {wine.get('country')}\")\n        print(f\"Price: {wine.get('price')}\")\n        print(f\"Points: {wine.get('points')}\")\n        print(\"-\" * 40)\n```\n\n### Explanation:\n1. **Environment Variables**:\n   - `WCD_TEST_URL`: The URL of your Weaviate Cloud instance.\n   - `WCD_TEST_KEY`: The API key for authenticating with your Weaviate Cloud instance.\n   - `OPENAI_API_KEY`: The API key for the OpenAI text2vec model.\n\n2. **Weaviate Client**:\n   - The `weaviate.Client` is initialized with the URL and API key for the Weaviate Cloud instance.\n   - The `X-OpenAI-Api-Key` header is added to enable the `text2vec-openai` vectorizer.\n\n3. **Query**:\n   - The `with_near_text` method is used to search for wines that match the query \"dessert wine\".\n   - The `with_limit(2)` method limits the results to a maximum of 2.\n\n4. **Response Handling**:\n   - The code checks for errors in the response and prints the title, country, price, and points of each matching wine.\n\nMake sure the environment variables are set correctly before running the code.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:14: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 14, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:19:01.652066",
      "duration": 11.907356023788452,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Below is the Python code that uses the latest Weaviate client syntax to query the `WineReview` collection for wines that best match the query \"dessert wine,\" with a limit of 2 results. The code connects to Weaviate Cloud using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, and it uses the OpenAI API key stored in the `OPENAI_API_KEY` environment variable.\n\n```python\nimport weaviate\nfrom weaviate.auth import AuthApiKey\nimport os\n\n# Retrieve environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Query the 'WineReview' collection\nresponse = client.query.get(\n    \"WineReview\",  # The name of the collection\n    [\"title\", \"country\", \"price\", \"points\"]  # Fields to retrieve\n).with_near_text({\n    \"concepts\": [\"dessert wine\"]\n}).with_limit(2).do()\n\n# Print the results\nif \"data\" in response and \"Get\" in response[\"data\"] and \"WineReview\" in response[\"data\"][\"Get\"]:\n    wines = response[\"data\"][\"Get\"][\"WineReview\"]\n    for wine in wines:\n        print(f\"Title: {wine.get('title')}\")\n        print(f\"Country: {wine.get('country')}\")\n        print(f\"Price: {wine.get('price')}\")\n        print(f\"Points: {wine.get('points')}\")\n        print(\"-\" * 40)\nelse:\n    print(\"No results found.\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**:\n   - `WCD_TEST_URL`: The URL of the Weaviate Cloud instance.\n   - `WCD_TEST_KEY`: The API key for the Weaviate Cloud instance.\n   - `OPENAI_API_KEY`: The API key for the OpenAI vectorizer.\n\n2. **Weaviate Client Connection**:\n   - The `weaviate.Client` is initialized with the `url` of the Weaviate Cloud instance and the `AuthApiKey` for authentication.\n   - The `X-OpenAI-API-Key` header is added to enable the `text2vec-openai` vectorizer.\n\n3. **Query**:\n   - The `client.query.get` method specifies the `WineReview` collection and the fields to retrieve (`title`, `country`, `price`, and `points`).\n   - The `.with_near_text` method is used to search for wines matching the query \"dessert wine.\"\n   - The `.with_limit(2)` method limits the results to a maximum of 2.\n\n4. **Response Handling**:\n   - The response is checked for the presence of data, and the results are printed in a readable format.\n\n5. **Closing the Client**:\n   - The `client.close()` method ensures the connection to Weaviate is properly closed.\n\nMake sure the environment variables are correctly set before running the code.",
      "stdout": "",
      "stderr": "/code/code.py:11: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 11, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "extensive_examples_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:19:12.293583",
      "duration": 10.334112167358398,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is the Python code to query the `WineReview` collection in Weaviate Cloud and find wines that best match the query \"dessert wine\", with a limit of 2 results. The code uses the latest Weaviate Python client syntax:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],  # Weaviate Cloud instance URL\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),  # Weaviate Cloud API key\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # OpenAI API key for text2vec-openai\n    }\n)\n\n# Query the 'WineReview' collection for wines matching \"dessert wine\"\nresponse = client.collections.get(\"WineReview\").query.near_text(\n    query=\"dessert wine\",\n    limit=2,  # Limit to 2 results\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]  # Properties to return\n)\n\n# Print the results\nfor wine in response.objects:\n    print(f\"Title: {wine.properties.get('title')}\")\n    print(f\"Country: {wine.properties.get('country')}\")\n    print(f\"Price: {wine.properties.get('price')}\")\n    print(f\"Points: {wine.properties.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**:\n   - `WCD_TEST_URL`: The URL of your Weaviate Cloud instance.\n   - `WCD_TEST_KEY`: The API key for your Weaviate Cloud instance.\n   - `OPENAI_API_KEY`: The API key for the OpenAI text2vec module.\n\n2. **Weaviate Connection**:\n   - The `weaviate.connect_to_weaviate_cloud` method is used to connect to the Weaviate Cloud instance with API key authentication.\n\n3. **Query**:\n   - The `near_text` method is used to perform a semantic search for the query \"dessert wine\".\n   - The `limit` parameter restricts the results to a maximum of 2.\n   - The `return_properties` parameter specifies the properties to retrieve for each matching wine: `title`, `country`, `price`, and `points`.\n\n4. **Results**:\n   - The results are iterated over, and the specified properties are printed for each matching wine.\n\n5. **Client Cleanup**:\n   - The `client.close()` method ensures the connection to Weaviate is properly closed after the query.\n\nMake sure the `WineReview` collection exists in your Weaviate instance and is configured with the `text2vec-openai` vectorizer. If you encounter any issues, ensure that the environment variables are correctly set and that the Weaviate instance is accessible.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:19:30.004185",
      "duration": 17.426727056503296,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Here's the Python code to query the `WineReview` collection in Weaviate using the latest client syntax:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.exceptions import WeaviateException\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Validate environment variables\nif not WCD_TEST_URL or not WCD_TEST_KEY or not OPENAI_API_KEY:\n    raise ValueError(\"Please ensure WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are set in the environment variables.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": OPENAI_API_KEY  # Required for text2vec-openai\n    }\n)\n\n# Define the query parameters\nquery = \"pair with steak\"\nlimit = 5\nalpha = 0.5\nprice_limit = 50\npoints_min = 90\nrequired_substrings = [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n\n# Construct the GraphQL query\ngraphql_query = {\n    \"query\": f\"\"\"\n    {{\n        Get {{\n            WineReview(\n                hybrid: {{\n                    query: \"{query}\",\n                    alpha: {alpha}\n                }},\n                where: {{\n                    operator: And,\n                    operands: [\n                        {{\n                            path: [\"price\"],\n                            operator: LessThan,\n                            valueNumber: {price_limit}\n                        }},\n                        {{\n                            path: [\"points\"],\n                            operator: GreaterThan,\n                            valueNumber: {points_min}\n                        }},\n                        {{\n                            operator: Or,\n                            operands: [\n                                {{\n                                    path: [\"review_body\"],\n                                    operator: Like,\n                                    valueText: \"*spice*\"\n                                }},\n                                {{\n                                    path: [\"review_body\"],\n                                    operator: Like,\n                                    valueText: \"*fruit*\"\n                                }},\n                                {{\n                                    path: [\"review_body\"],\n                                    operator: Like,\n                                    valueText: \"*berry*\"\n                                }},\n                                {{\n                                    path: [\"review_body\"],\n                                    operator: Like,\n                                    valueText: \"*cherry*\"\n                                }},\n                                {{\n                                    path: [\"review_body\"],\n                                    operator: Like,\n                                    valueText: \"*honey*\"\n                                }}\n                            ]\n                        }}\n                    ]\n                }},\n                limit: {limit}\n            ) {{\n                title\n                country\n                price\n                points\n            }}\n        }}\n    }}\n    \"\"\"\n}\n\n# Execute the query\ntry:\n    response = client.query.raw(graphql_query)\n    results = response.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", [])\n\n    # Print the results\n    if results:\n        print(\"Matching wines:\")\n        for wine in results:\n            print(f\"Title: {wine['title']}, Country: {wine['country']}, Price: {wine['price']}, Points: {wine['points']}\")\n    else:\n        print(\"No matching wines found.\")\nexcept WeaviateException as e:\n    print(f\"An error occurred while querying Weaviate: {e}\")\n```\n\n### Explanation:\n1. **Environment Variables**:\n   - `WCD_TEST_URL`: URL of the Weaviate Cloud instance.\n   - `WCD_TEST_KEY`: API key for the Weaviate Cloud instance.\n   - `OPENAI_API_KEY`: API key for the OpenAI vectorizer.\n\n2. **Hybrid Search**:\n   - The `hybrid` parameter combines vector search and keyword search with a balance controlled by `alpha`.\n\n3. **Filters**:\n   - `price` is less than 50.\n   - `points` is greater than 90.\n   - `review_body` contains at least one of the specified substrings using the `Like` operator.\n\n4. **GraphQL Query**:\n   - The query is constructed dynamically to include the filters and hybrid search parameters.\n\n5. **Results**:\n   - The query retrieves the `title`, `country`, `price`, and `points` fields for each matching wine.\n   - Results are printed in a readable format.\n\nMake sure the environment variables are correctly set before running the code.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 3, in <module>\n    from weaviate.exceptions import WeaviateException\nImportError: cannot import name 'WeaviateException' from 'weaviate.exceptions' (/usr/local/lib/python3.9/site-packages/weaviate/exceptions.py)\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:19:52.236667",
      "duration": 21.941967010498047,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Here is the Python code that fulfills your requirements using the latest Weaviate client syntax:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\nfrom weaviate.gql.query import GetBuilder\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    }\n)\n\n# Define the query parameters\nquery = \"pair with steak\"\nlimit = 5\nalpha = 0.5\nprice_limit = 50\npoints_threshold = 90\nreview_keywords = [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n\n# Build the GraphQL query\ngql_query = (\n    client.query\n    .get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"])\n    .with_hybrid(query=query, alpha=alpha)\n    .with_limit(limit)\n    .with_where({\n        \"operator\": \"And\",\n        \"operands\": [\n            {\n                \"path\": [\"price\"],\n                \"operator\": \"LessThan\",\n                \"valueInt\": price_limit\n            },\n            {\n                \"path\": [\"points\"],\n                \"operator\": \"GreaterThan\",\n                \"valueInt\": points_threshold\n            },\n            {\n                \"operator\": \"Or\",\n                \"operands\": [\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": f\"*{keyword}*\"\n                    } for keyword in review_keywords\n                ]\n            }\n        ]\n    })\n)\n\n# Execute the query\nresponse = gql_query.do()\n\n# Process and print the results\nif \"data\" in response and \"Get\" in response[\"data\"] and \"WineReview\" in response[\"data\"][\"Get\"]:\n    results = response[\"data\"][\"Get\"][\"WineReview\"]\n    for wine in results:\n        print(f\"Title: {wine.get('title')}\")\n        print(f\"Country: {wine.get('country')}\")\n        print(f\"Price: {wine.get('price')}\")\n        print(f\"Points: {wine.get('points')}\")\n        print(\"-\" * 40)\nelse:\n    print(\"No results found.\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation of the Code:\n1. **Environment Variables**:\n   - `WCD_TEST_URL`: URL of the Weaviate Cloud instance.\n   - `WCD_TEST_KEY`: API key for the Weaviate Cloud instance.\n   - `OPENAI_API_KEY`: API key for the OpenAI vectorizer.\n\n2. **Weaviate Client**:\n   - Connects to the Weaviate Cloud instance using the `weaviate.Client` class with the appropriate authentication and headers.\n\n3. **Hybrid Query**:\n   - Uses the `with_hybrid` method to perform a hybrid search with the query `\"pair with steak\"` and `alpha=0.5`.\n\n4. **Filters**:\n   - Filters results to include only wines with:\n     - `price` less than 50.\n     - `points` greater than 90.\n     - `review_body` containing at least one of the specified substrings (`\"spice\"`, `\"fruit\"`, `\"berry\"`, `\"cherry\"`, `\"honey\"`).\n\n5. **GraphQL Query**:\n   - Retrieves the `title`, `country`, `price`, and `points` fields for each matching wine.\n\n6. **Results**:\n   - Prints the details of each matching wine in a formatted manner.\n\n7. **Error Handling**:\n   - Checks if the response contains valid data before processing the results.\n\n8. **Close Connection**:\n   - Closes the Weaviate client connection after the query is executed.\n\nMake sure the environment variables are correctly set before running the script.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 4, in <module>\n    from weaviate.gql.query import GetBuilder\nModuleNotFoundError: No module named 'weaviate.gql.query'\n",
      "exit_code": 1
    },
    "extensive_examples_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:20:18.435325",
      "duration": 25.882021188735962,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is the Python code to query the `WineReview` collection using the latest Weaviate client syntax, based on your requirements:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.query import HybridFusion, Filter\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Define the query parameters\nquery = \"pair with steak\"\nalpha = 0.5\nlimit = 5\n\n# Define the filter conditions\nfilter_conditions = (\n    Filter.by_property(\"price\").less_than(50) &\n    Filter.by_property(\"points\").greater_than(90) &\n    (\n        Filter.by_property(\"review_body\").like(\"*spice*\") |\n        Filter.by_property(\"review_body\").like(\"*fruit*\") |\n        Filter.by_property(\"review_body\").like(\"*berry*\") |\n        Filter.by_property(\"review_body\").like(\"*cherry*\") |\n        Filter.by_property(\"review_body\").like(\"*honey*\")\n    )\n)\n\n# Perform the hybrid search\nresponse = client.collections.get(\"WineReview\").query.hybrid(\n    query=query,\n    alpha=alpha,\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    filters=filter_conditions,\n    limit=limit,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor wine in response.objects:\n    print(f\"Title: {wine.properties['title']}\")\n    print(f\"Country: {wine.properties['country']}\")\n    print(f\"Price: {wine.properties['price']}\")\n    print(f\"Points: {wine.properties['points']}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation of the Code:\n1. **Connection to Weaviate Cloud**:\n   - The `connect_to_weaviate_cloud` method is used to connect to the Weaviate Cloud instance using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n   - The `X-OpenAI-Api-Key` header is included for the `text2vec-openai` vectorizer.\n\n2. **Query Parameters**:\n   - The query is set to `\"pair with steak\"`.\n   - `alpha=0.5` ensures a hybrid search with equal weight for semantic and keyword search.\n   - The `limit` is set to 5 to restrict the number of results.\n\n3. **Filter Conditions**:\n   - The `price` must be less than 50.\n   - The `points` must be greater than 90.\n   - The `review_body` must contain at least one of the substrings: `\"spice\"`, `\"fruit\"`, `\"berry\"`, `\"cherry\"`, or `\"honey\"`.\n   - These conditions are combined using logical operators (`&` for AND, `|` for OR).\n\n4. **Hybrid Search**:\n   - The `hybrid` method is used to perform a hybrid search with the specified query, alpha value, filters, and limit.\n   - The `return_properties` parameter specifies the fields to include in the results (`title`, `country`, `price`, and `points`).\n\n5. **Results**:\n   - The results are iterated over, and the specified properties are printed for each matching wine.\n\n6. **Cleanup**:\n   - The `client.close()` method ensures the connection to Weaviate is properly closed.\n\n### Notes:\n- Ensure the `WineReview` collection exists in your Weaviate instance and has the required properties (`title`, `country`, `price`, `points`, `review_body`).\n- If you encounter any issues, verify the environment variables and the schema of the `WineReview` collection.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 8, in <module>\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute Auth\n",
      "exit_code": 1
    }
  },
  "openai/gpt-4o-mini-2024-07-18": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:20:28.039617",
      "duration": 9.590469121932983,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "To connect to Weaviate Cloud using the latest Weaviate client syntax and check if the server is ready to accept requests, you can use the following Python code. This code assumes that you have the Weaviate client installed (`weaviate-client` package). If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install weaviate-client\n```\n\nHere is the Python code:\n\n```python\nimport os\nimport weaviate\n\n# Get the Weaviate Cloud URL and API key from environment variables\nwcd_url = os.getenv('WCD_TEST_URL')\nwcd_key = os.getenv('WCD_TEST_KEY')\n\n# Create a Weaviate client instance\nclient = weaviate.Client(\n    url=wcd_url,\n    auth_client_secret=weaviate.AuthClientSecret(wcd_key)\n)\n\n# Check if the server is ready to accept requests\ntry:\n    client.is_ready()\n    print(\"The Weaviate server is ready to accept requests.\")\nexcept Exception as e:\n    print(f\"The Weaviate server is not ready: {e}\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL and API key from the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n2. **Client Initialization**: It initializes the Weaviate client with the provided URL and API key.\n3. **Server Readiness Check**: It checks if the server is ready to accept requests using the `is_ready()` method. If the server is ready, it prints a confirmation message; otherwise, it catches any exceptions and prints an error message.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 11, in <module>\n    auth_client_secret=weaviate.AuthClientSecret(wcd_key)\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute AuthClientSecret\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:20:32.876032",
      "duration": 4.82788872718811,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "Here's the Python code to connect to Weaviate Cloud using the specified environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, and to check if the server is ready to accept requests:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Retrieve the Weaviate Cloud URL and API key from environment variables\ncluster_url = os.getenv('WCD_TEST_URL')\napi_key = os.getenv('WCD_TEST_KEY')\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Check if the server is ready to accept requests\nassert client.is_ready()\n\n# Close the client connection\nclient.close()\n```\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running this code.",
      "stdout": "",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:20:48.139026",
      "duration": 15.25557804107666,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "To create a collection (also known as a class in Weaviate) named \"DemoProducts\" with the specified properties, you can use the Weaviate Python client. Below is a Python script that connects to a Weaviate Cloud instance using the provided environment variables, checks if the class already exists, deletes it if it does, and then creates the new class with the specified properties.\n\nMake sure you have the Weaviate client installed. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install weaviate-client\n```\n\nHere is the Python code:\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nweaviate_url = os.getenv('WCD_TEST_URL')\nweaviate_key = os.getenv('WCD_TEST_KEY')\n\n# Initialize Weaviate client\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=weaviate.AuthClientSecret(weaviate_key)\n)\n\n# Define the class name and properties\nclass_name = \"DemoProducts\"\nclass_schema = {\n    \"class\": class_name,\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"price\",\n            \"dataType\": [\"number\"]\n        },\n        {\n            \"name\": \"in_stock\",\n            \"dataType\": [\"boolean\"]\n        }\n    ]\n}\n\n# Check if the class already exists\nif client.schema.contains(class_name):\n    print(f\"Class '{class_name}' already exists. Deleting it...\")\n    client.schema.delete_class(class_name)\n\n# Create the new class\nprint(f\"Creating class '{class_name}'...\")\nclient.schema.create_class(class_schema)\nprint(f\"Class '{class_name}' created successfully.\")\n```\n\n### Explanation:\n1. **Environment Variables**: The script retrieves the Weaviate Cloud URL and API key from environment variables.\n2. **Client Initialization**: It initializes the Weaviate client with the provided URL and API key.\n3. **Class Definition**: It defines the class schema for \"DemoProducts\" with the specified properties.\n4. **Class Existence Check**: It checks if the class already exists in the schema. If it does, it deletes the class.\n5. **Class Creation**: Finally, it creates the new class in the Weaviate schema.\n\n### Note:\n- Ensure that the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set in your environment before running the script.\n- The script will print messages to indicate the status of the operations being performed.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 11, in <module>\n    auth_client_secret=weaviate.AuthClientSecret(weaviate_key)\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute AuthClientSecret\n",
      "exit_code": 1
    },
    "simple_example_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:20:58.523370",
      "duration": 10.371978044509888,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "Here's the updated Python code using the latest Weaviate client syntax to create a collection named \"DemoProducts\" with the specified properties. The code connects to Weaviate Cloud using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, and it deletes the collection if it already exists.\n\n```python\nimport os\nimport weaviate\nfrom weaviate import Auth, Property, DataType\n\n# Connect to the Weaviate Cloud instance using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv('WCD_TEST_URL'),\n    auth_credentials=Auth.api_key(os.getenv('WCD_TEST_KEY'))\n)\n\n# Define the collection name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.schema.contains(collection_name):\n    client.schema.delete_class(collection_name)\n\n# Create the collection with the specified properties\nclient.schema.create_class(\n    class_name=collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {collection_name}\")\n\n# Close connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL and API key from environment variables using `os.getenv()`.\n2. **Connection**: It establishes a connection to the Weaviate Cloud instance using the `connect_to_weaviate_cloud` method.\n3. **Check and Delete Existing Collection**: It checks if the collection already exists using `client.schema.contains()` and deletes it if it does using `client.schema.delete_class()`.\n4. **Create Collection**: It creates the collection with the specified properties using `client.schema.create_class()`.\n5. **Close Connection**: Finally, it closes the connection to the Weaviate instance.\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running the code.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 3, in <module>\n    from weaviate import Auth, Property, DataType\nImportError: cannot import name 'Auth' from 'weaviate' (/usr/local/lib/python3.9/site-packages/weaviate/__init__.py)\n",
      "exit_code": 1
    },
    "extensive_examples_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:21:07.927569",
      "duration": 9.394820213317871,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's the Python code to create a collection named \"DemoProducts\" in Weaviate, with the specified properties. The code connects to Weaviate Cloud using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`. If the collection already exists, it will be deleted first.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\n# Define the collection name\ncollection_name = \"DemoProducts\"\n\n# Check if the collection already exists\nif client.collections.exists(collection_name):\n    # Delete the existing collection\n    client.collections.delete(collection_name)\n\n# Create the new collection with the specified properties\nclient.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Collection '{collection_name}' created successfully.\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code uses `os.environ` to access the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables for connecting to the Weaviate Cloud instance.\n2. **Connection**: It establishes a connection to Weaviate Cloud using the provided URL and API key.\n3. **Collection Management**:\n   - It checks if the collection \"DemoProducts\" already exists.\n   - If it does, it deletes the existing collection.\n   - Finally, it creates a new collection with the specified properties: `name`, `description`, `price`, and `in_stock`.\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running the code.",
      "stdout": "Collection 'DemoProducts' created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n  warnings.warn(\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 0
    },
    "zero_shot_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:21:21.093077",
      "duration": 12.630417108535767,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "To interact with Weaviate using the latest client syntax, you can use the following Python code. This code connects to a Weaviate Cloud instance using environment variables, adds 50 arbitrary objects to the \"DemoProducts\" collection, and then prints the number of objects in that collection.\n\nMake sure you have the Weaviate client installed. You can install it using pip if you haven't done so already:\n\n```bash\npip install weaviate-client\n```\n\nHere's the Python code:\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nweaviate_url = os.getenv('WCD_TEST_URL')\nweaviate_key = os.getenv('WCD_TEST_KEY')\n\n# Initialize Weaviate client\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=weaviate.AuthClientPassword(username='', password=weaviate_key)\n)\n\n# Define the class for the collection if it doesn't exist\nclass_name = \"DemoProducts\"\nschema = {\n    \"classes\": [\n        {\n            \"class\": class_name,\n            \"properties\": [\n                {\n                    \"name\": \"name\",\n                    \"dataType\": [\"text\"]\n                },\n                {\n                    \"name\": \"description\",\n                    \"dataType\": [\"text\"]\n                }\n            ]\n        }\n    ]\n}\n\n# Create the class in Weaviate if it doesn't exist\nif not client.schema.contains(class_name):\n    client.schema.create(schema)\n\n# Prepare objects to be added\nobjects_to_add = [\n    {\n        \"class\": class_name,\n        \"properties\": {\n            \"name\": f\"Product {i}\",\n            \"description\": f\"Description {i}\"\n        }\n    }\n    for i in range(50)\n]\n\n# Batch import objects\nclient.batch.create(objects_to_add)\n\n# Count the number of objects in the collection\ncount = client.data_object.count(class_name)\nprint(f\"Number of objects in '{class_name}': {count}\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL and API key from environment variables.\n2. **Client Initialization**: It initializes the Weaviate client with the provided URL and API key.\n3. **Schema Definition**: It defines the schema for the \"DemoProducts\" class with the specified properties.\n4. **Class Creation**: It checks if the class already exists and creates it if it doesn't.\n5. **Object Preparation**: It prepares a list of 50 objects with names and descriptions.\n6. **Batch Import**: It uses the batch import functionality to add the objects to the collection.\n7. **Count and Print**: Finally, it counts the number of objects in the \"DemoProducts\" collection and prints the result.\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running the script.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthClientPassword from weaviate is deprecated. Import AuthClientPassword from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:9: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 9, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:21:34.945883",
      "duration": 13.299101829528809,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "To achieve the task of adding objects to a Weaviate collection named \"DemoProducts\" using the latest Weaviate client syntax, you can follow the code below. This code connects to Weaviate Cloud using the specified environment variables, creates 50 arbitrary objects, and then imports them into the collection. Finally, it prints the number of objects in the collection.\n\nHere's the complete code:\n\n```python\nimport os\nimport weaviate\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=weaviate.Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n)\n\n# Define the collection name\ncollection_name = \"DemoProducts\"\n\n# Create a list of 50 arbitrary objects\ndata_rows = [\n    {\"name\": f\"Product {i+1}\", \"description\": f\"Description {i+1}\"} for i in range(50)\n]\n\n# Get the collection\ncollection = client.collections.get(collection_name)\n\n# Batch import the objects\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\n# Check for failed objects\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\n# Print the number of objects in the collection\nprint(f\"Number of objects in '{collection_name}': {len(collection)}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**: The code uses `os.getenv()` to retrieve the Weaviate Cloud URL and API key from environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n\n2. **Creating Objects**: A list comprehension is used to create 50 objects with the specified properties (`name` and `description`).\n\n3. **Batch Import**: The code uses a dynamic batch to add objects to the collection. If the number of errors exceeds 10, it stops the batch import.\n\n4. **Error Handling**: After the batch import, it checks for any failed objects and prints the number of failed imports along with the first failed object if there are any.\n\n5. **Counting Objects**: Finally, it prints the total number of objects in the collection.\n\nMake sure to have the Weaviate client installed and the environment variables set before running this code. You can install the Weaviate client using pip if you haven't done so:\n\n```bash\npip install weaviate-client\n```",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 7, in <module>\n    auth_credentials=weaviate.Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute Auth\n",
      "exit_code": 1
    },
    "extensive_examples_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:21:48.383724",
      "duration": 12.897270917892456,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's a complete Python script that connects to a Weaviate Cloud instance using the latest client syntax, creates a collection named \"DemoProducts\" with the specified properties, and batch imports 50 arbitrary objects into that collection. Finally, it prints the number of objects in the collection.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\n# Create the \"DemoProducts\" collection with the specified properties\nclient.collections.create(\n    \"DemoProducts\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n    ]\n)\n\n# Batch import 50 arbitrary objects into the collection\nwith client.collections.get(\"DemoProducts\").batch.fixed_size(batch_size=50) as batch:\n    for i in range(50):\n        batch.add_object(\n            properties={\n                \"name\": f\"Product {i}\",\n                \"description\": f\"Description {i}\"\n            }\n        )\n\n# Print the number of objects in the collection\ncollection = client.collections.get(\"DemoProducts\")\nobject_count = collection.data.count()\nprint(f\"Number of objects in 'DemoProducts': {object_count}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Connection**: The script connects to the Weaviate Cloud instance using the provided environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n2. **Collection Creation**: It creates a collection named \"DemoProducts\" with two properties: `name` and `description`, both of type `TEXT`.\n3. **Batch Import**: It uses a fixed-size batch operation to insert 50 objects into the collection, where each object has a name and description formatted with the index `i`.\n4. **Count Objects**: Finally, it retrieves and prints the number of objects in the \"DemoProducts\" collection.\n5. **Cleanup**: The client connection is closed at the end of the script.\n\nMake sure to set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` before running the script.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\nTraceback (most recent call last):\n  File \"/code/code.py\", line 13, in <module>\n    client.collections.create(\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/collections/collections/sync.py\", line 107, in create\n    self.__loop.run_until_complete(\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/event_loop.py\", line 42, in run_until_complete\n    return fut.result()\n  File \"/usr/local/lib/python3.9/concurrent/futures/_base.py\", line 446, in result\n    return self.__get_result()\n  File \"/usr/local/lib/python3.9/concurrent/futures/_base.py\", line 391, in __get_result\n    raise self._exception\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/collections/collections/async_.py\", line 134, in create\n    name = await super()._create(config._to_dict())\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/collections/collections/base.py\", line 27, in _create\n    response = await self._connection.post(\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/connect/v4.py\", line 550, in post\n    return await self.__send(\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/connect/v4.py\", line 505, in __send\n    raise e\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/connect/v4.py\", line 496, in __send\n    raise UnexpectedStatusCodeError(error_msg, response=res)\nweaviate.exceptions.UnexpectedStatusCodeError: Collection may not have been created properly.! Unexpected status code: 422, with response body: {'error': [{'message': 'class name DemoProducts already exists'}]}.\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 1
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:21:58.156416",
      "duration": 9.481917381286621,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "To query the 'WineReview' collection in Weaviate using the latest client syntax, you can use the following Python code. This code connects to the Weaviate Cloud instance using the specified environment variables and performs a query to find wines that best match the query \"dessert wine\". It limits the results to a maximum of 2 and prints the relevant details for each matching wine.\n\nMake sure you have the Weaviate client installed. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install weaviate-client\n```\n\nHere is the Python code:\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nwcd_test_url = os.getenv('WCD_TEST_URL')\nwcd_test_key = os.getenv('WCD_TEST_KEY')\nopenai_api_key = os.getenv('OPENAI_API_KEY')\n\n# Initialize Weaviate client\nclient = weaviate.Client(\n    url=wcd_test_url,\n    auth_client_secret=weaviate.AuthClientSecret(\n        wcd_test_key\n    ),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key\n    }\n)\n\n# Define the query\nquery = \"dessert wine\"\n\n# Perform the query\nresults = client.query.get(\n    class_name='WineReview',\n    properties=['title', 'country', 'price', 'points']\n).with_near_text({\n    \"concepts\": [query],\n}).with_limit(2).do()\n\n# Print the results\nfor wine in results['data']['Get']['WineReview']:\n    print(f\"Title: {wine['title']}, Country: {wine['country']}, Price: {wine['price']}, Points: {wine['points']}\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL, API key, and OpenAI API key from environment variables.\n2. **Weaviate Client Initialization**: It initializes the Weaviate client with the provided URL and authentication details.\n3. **Query Definition**: The query is defined to search for wines that match the concept \"dessert wine\".\n4. **Query Execution**: The query is executed with a limit of 2 results, and it retrieves the specified properties (title, country, price, points).\n5. **Results Printing**: Finally, it prints the details of each matching wine.\n\nMake sure to set the environment variables correctly before running the script.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 12, in <module>\n    auth_client_secret=weaviate.AuthClientSecret(\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute AuthClientSecret\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:22:12.931997",
      "duration": 14.46768832206726,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Here's the Python code that uses the latest Weaviate client syntax to query the 'WineReview' collection for wines that best match the query \"dessert wine\", with a limit of 2 results. The code connects to Weaviate Cloud using the specified environment variables and prints the title, country, price, and points of each matching wine.\n\n```python\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-API-Key\": os.getenv(\"OPENAI_API_KEY\")\n    },\n)\n\n# Define the collection name\ncollection_name = \"WineReview\"\n\n# Query the collection for wines that match \"dessert wine\"\nresponse = client.query.get(collection_name).with_near_text(\n    query=\"dessert wine\",\n    limit=2\n).do()\n\n# Print the title, country, price, and points of each matching wine\nfor obj in response['data']['Get'][collection_name]:\n    title = obj.get('title')\n    country = obj.get('country')\n    price = obj.get('price')\n    points = obj.get('points')\n    \n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL, API key, and OpenAI API key from environment variables.\n2. **Connection**: It establishes a connection to the Weaviate Cloud instance using the `connect_to_weaviate_cloud` method.\n3. **Query**: The code queries the 'WineReview' collection using the `with_near_text` method to find wines that match the query \"dessert wine\" with a limit of 2 results.\n4. **Output**: It iterates through the results and prints the title, country, price, and points for each matching wine.\n5. **Closing the Client**: Finally, it closes the client connection to clean up resources. \n\nMake sure to set the environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY` before running the code.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 18, in <module>\n    response = client.query.get(collection_name).with_near_text(\nAttributeError: 'WeaviateClient' object has no attribute 'query'\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n  warnings.warn(\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 1
    },
    "extensive_examples_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:22:23.570864",
      "duration": 10.355387926101685,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's the Python code to query the 'WineReview' collection in Weaviate for wines that best match the query \"dessert wine\", with a limit of 2 results. This code uses the latest Weaviate client syntax and connects to Weaviate Cloud using the specified environment variables.\n\n```python\nimport weaviate\nimport os\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Query the 'WineReview' collection for wines matching \"dessert wine\"\nresponse = client.collections.get(\"WineReview\").query.near_text(\n    query=\"dessert wine\",\n    limit=2,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor obj in response.objects:\n    print(f\"Title: {obj.properties['title']}, Country: {obj.properties['country']}, Price: {obj.properties['price']}, Points: {obj.properties['points']}\")\n```\n\n### Explanation:\n1. **Connection**: The code connects to the Weaviate Cloud instance using the `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables. It also includes the OpenAI API key for vectorization.\n2. **Query**: It queries the 'WineReview' collection using the `near_text` method to find wines that match the query \"dessert wine\", limiting the results to 2.\n3. **Output**: It prints the title, country, price, and points of each matching wine.\n\nMake sure to set the environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY` before running this code.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 7, in <module>\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute Auth\n",
      "exit_code": 1
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:22:38.402235",
      "duration": 14.538204908370972,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "To query the 'WineReview' collection in Weaviate using the latest client syntax, you can use the following Python code. This code connects to the Weaviate Cloud instance using the specified environment variables and performs a hybrid search based on your requirements.\n\nMake sure you have the Weaviate client installed. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install weaviate-client\n```\n\nHere's the Python code to perform the query:\n\n```python\nimport os\nimport weaviate\n\n# Load environment variables\nwcd_test_url = os.getenv('WCD_TEST_URL')\nwcd_test_key = os.getenv('WCD_TEST_KEY')\nopenai_api_key = os.getenv('OPENAI_API_KEY')\n\n# Initialize Weaviate client\nclient = weaviate.Client(\n    url=wcd_test_url,\n    auth_client_secret=weaviate.AuthClientPassword(\n        username=wcd_test_key,\n        password=\"\"\n    ),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key\n    }\n)\n\n# Define the hybrid search query\nquery = {\n    \"nearText\": {\n        \"concepts\": [\"pair with steak\"],\n        \"certainty\": 0.5\n    },\n    \"where\": {\n        \"operator\": \"And\",\n        \"operands\": [\n            {\n                \"path\": [\"price\"],\n                \"operator\": \"LessThan\",\n                \"valueNumber\": 50\n            },\n            {\n                \"path\": [\"points\"],\n                \"operator\": \"GreaterThan\",\n                \"valueNumber\": 90\n            },\n            {\n                \"path\": [\"review_body\"],\n                \"operator\": \"ContainsAny\",\n                \"valueString\": [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n            }\n        ]\n    },\n    \"limit\": 5\n}\n\n# Execute the query\nresults = client.query.get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"]) \\\n    .with_where(query[\"where\"]) \\\n    .with_near_text(query[\"nearText\"]) \\\n    .with_limit(query[\"limit\"]) \\\n    .do()\n\n# Print the results\nfor result in results['data']['Get']['WineReview']:\n    print(f\"Title: {result['title']}, Country: {result['country']}, Price: {result['price']}, Points: {result['points']}\")\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL, API key, and OpenAI API key from environment variables.\n2. **Client Initialization**: It initializes the Weaviate client with the provided URL and authentication details.\n3. **Query Definition**: The query is defined to search for wines that match the criteria specified (price, points, and review body).\n4. **Executing the Query**: The query is executed using the `client.query.get` method, specifying the fields to retrieve.\n5. **Results Printing**: Finally, it prints the title, country, price, and points of each matching wine.\n\nMake sure to set the environment variables correctly before running the code.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthClientPassword from weaviate is deprecated. Import AuthClientPassword from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:10: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:22:50.708384",
      "duration": 12.032764196395874,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Here's the Python code that uses the latest Weaviate client syntax to query the 'WineReview' collection for wines that best match the query \"pair with steak\", with the specified conditions:\n\n```python\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-API-Key\": os.getenv(\"OPENAI_API_KEY\")\n    },\n)\n\n# Define the collection\ncollection = client.collections.get(\"WineReview\")\n\n# Perform the hybrid query\nresponse = collection.query.hybrid(\n    query=\"pair with steak\",\n    limit=5,\n    alpha=0.5,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\n# Print the results\nfor obj in response.objects:\n    title = obj.properties.get(\"title\")\n    country = obj.properties.get(\"country\")\n    price = obj.properties.get(\"price\")\n    points = obj.properties.get(\"points\")\n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n    print(f\"Score: {obj.metadata.score}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n1. **Environment Variables**: The code retrieves the Weaviate Cloud URL, API key, and OpenAI API key from environment variables.\n2. **Connection**: It establishes a connection to the Weaviate Cloud instance using the provided credentials.\n3. **Query**: The hybrid query is executed on the 'WineReview' collection with the specified filters:\n   - Price less than 50\n   - Points greater than 90\n   - Review body contains at least one of the specified substrings.\n4. **Results**: The results are printed, showing the title, country, price, points, and score for each matching wine.\n5. **Closing Connection**: Finally, the client connection is closed.\n\nMake sure to set the environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY` before running the code.",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir, Country: US, Price: 40.0, Points: 92\nScore: 0.5\nTitle: Bink 2014 Pinot Noir (Anderson Valley), Country: US, Price: 49.0, Points: 91\nScore: 0.46207502484321594\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza), Country: Argentina, Price: 27.0, Points: 91\nScore: 0.21977002918720245\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji), Country: Hungary, Price: 25.0, Points: 93\nScore: 0.06533736735582352\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux, Country: France, Price: 0.0, Points: 94\nScore: 0.018121296539902687\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:23:02.143015",
      "duration": 11.1670081615448,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's the Python code to query the 'WineReview' collection in Weaviate, looking for wines that best match the query \"pair with steak\", with the specified filters and hybrid search settings:\n\n```python\nimport weaviate\nimport os\nfrom weaviate.classes.query import Filter, HybridFusion\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Define the query\nquery = \"pair with steak\"\n\n# Define the filters\nfilters = (\n    Filter.by_property(\"price\").less_than(50) &\n    Filter.by_property(\"points\").greater_than(90) &\n    (\n        Filter.by_property(\"review_body\").like(\"*spice*\") |\n        Filter.by_property(\"review_body\").like(\"*fruit*\") |\n        Filter.by_property(\"review_body\").like(\"*berry*\") |\n        Filter.by_property(\"review_body\").like(\"*cherry*\") |\n        Filter.by_property(\"review_body\").like(\"*honey*\")\n    )\n)\n\n# Perform the hybrid search\nresponse = client.data.query.hybrid(\n    query=query,\n    alpha=0.5,\n    filters=filters,\n    limit=5,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor obj in response['data']['Get']['WineReview']:\n    print(f\"Title: {obj['title']}, Country: {obj['country']}, Price: {obj['price']}, Points: {obj['points']}\")\n```\n\n### Explanation:\n1. **Connection**: The code connects to the Weaviate Cloud instance using the provided environment variables for the URL and API key.\n2. **Query Definition**: The query is set to \"pair with steak\".\n3. **Filters**: The filters are defined to ensure that the price is less than 50, points are greater than 90, and the review body contains at least one of the specified substrings.\n4. **Hybrid Search**: The hybrid search is performed with an alpha value of 0.5, combining semantic and keyword search.\n5. **Results**: The results are printed, displaying the title, country, price, and points of each matching wine.\n\nMake sure to have the Weaviate client installed and the necessary environment variables set before running the code.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 8, in <module>\n    auth_credentials=weaviate.Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n  File \"/usr/local/lib/python3.9/site-packages/weaviate/__init__.py\", line 147, in __getattr__\n    raise AttributeError(f\"module {__name__} has no attribute {name}\")\nAttributeError: module weaviate has no attribute Auth\n",
      "exit_code": 1
    }
  },
  "openai/gpt-4.5-preview-2025-02-27": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:23:07.570632",
      "duration": 5.416982173919678,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Retrieve Weaviate Cloud URL and API key from environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\n\n# Connect to Weaviate Cloud instance\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=AuthApiKey(api_key=weaviate_api_key)\n)\n\n# Check if the Weaviate server is ready\nis_ready = client.is_ready()\nprint(f\"Weaviate server ready: {is_ready}\")\n```",
      "stdout": "",
      "stderr": "/code/code.py:10: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:23:11.607929",
      "duration": 4.0296571254730225,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud instance using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=Auth.api_key(os.getenv(\"WCD_TEST_KEY\"))\n)\n\n# Check if the server is ready\nassert client.is_ready()\n\n# Close the client connection\nclient.close()\n```",
      "stdout": "",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:23:25.302969",
      "duration": 13.686161994934082,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "Here's Python code using the latest Weaviate Python client syntax to connect to Weaviate Cloud, delete the collection if it already exists, and then create a new collection named \"DemoProducts\" with the specified properties:\n\n```python\nimport weaviate\nimport os\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_wcs(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=weaviate.auth.AuthApiKey(os.getenv(\"WCD_TEST_KEY\"))\n)\n\n# Delete the collection if it already exists\nif client.collections.exists(\"DemoProducts\"):\n    client.collections.delete(\"DemoProducts\")\n\n# Define and create the new collection\nclient.collections.create(\n    name=\"DemoProducts\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(\"Collection 'DemoProducts' created successfully.\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n- The code uses environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` to securely connect to your Weaviate Cloud instance.\n- It checks if the collection `\"DemoProducts\"` already exists and deletes it if necessary.\n- It then creates a new collection `\"DemoProducts\"` with the specified properties:\n  - `name` (text)\n  - `description` (text)\n  - `price` (number)\n  - `in_stock` (boolean)\n- Finally, it closes the client connection.",
      "stdout": "Collection 'DemoProducts' created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "simple_example_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:23:37.914899",
      "duration": 12.601937055587769,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "Here's the complete Python code using the latest Weaviate Python client syntax, connecting to Weaviate Cloud using environment variables, and creating the collection \"DemoProducts\":\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Connect to Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY)\n)\n\n# Define collection name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n    print(f\"Deleted existing collection: {collection_name}\")\n\n# Create the collection with specified properties\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close the connection\nclient.close()\n```\n\n### Explanation:\n- The code uses environment variables (`WCD_TEST_URL` and `WCD_TEST_KEY`) to securely connect to your Weaviate Cloud instance.\n- It checks if the collection already exists and deletes it if necessary.\n- It creates a new collection named `\"DemoProducts\"` with the specified properties:\n  - `name`: text\n  - `description`: text\n  - `price`: number\n  - `in_stock`: boolean\n- Finally, it closes the client connection.",
      "stdout": "Deleted existing collection: DemoProducts\nCreated collection: DemoProducts\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "extensive_examples_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:23:52.708878",
      "duration": 14.784512996673584,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is Python code using the latest Weaviate Python client syntax (v4.x) to:\n\n- Connect to Weaviate Cloud using environment variables (`WCD_TEST_URL` and `WCD_TEST_KEY`)\n- Delete the collection `\"DemoProducts\"` if it already exists\n- Create a new collection `\"DemoProducts\"` with the specified properties\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\n# Delete the collection if it already exists\nif client.collections.exists(\"DemoProducts\"):\n    client.collections.delete(\"DemoProducts\")\n    print(\"Deleted existing 'DemoProducts' collection.\")\n\n# Create the new collection with specified properties\nclient.collections.create(\n    name=\"DemoProducts\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(\"Created 'DemoProducts' collection successfully.\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- **Connection**: Uses environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` to securely connect to your Weaviate Cloud instance.\n- **Collection Management**: Checks if `\"DemoProducts\"` exists, deletes it if necessary, and then creates it with the specified properties.\n- **Properties**:\n  - `name`: Text property\n  - `description`: Text property\n  - `price`: Number property\n  - `in_stock`: Boolean property\n\nMake sure the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set before running this script.",
      "stdout": "Deleted existing 'DemoProducts' collection.\nCreated 'DemoProducts' collection successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "zero_shot_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:24:12.839071",
      "duration": 19.537139892578125,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "Here's a complete Python script using the latest Weaviate Python client syntax to:\n\n- Connect to Weaviate Cloud using environment variables.\n- Create a collection named \"DemoProducts\" with properties \"name\" and \"description\".\n- Batch import 50 arbitrary objects.\n- Print the number of objects in the collection.\n\n### Python Code:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_wcs(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=weaviate.auth.AuthApiKey(os.getenv(\"WCD_TEST_KEY\"))\n)\n\n# Define the collection schema\ncollection_name = \"DemoProducts\"\n\n# Check if collection exists, delete if it does\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\n# Create the collection with properties\nclient.collections.create(\n    name=collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT)\n    ]\n)\n\n# Get the collection object\ncollection = client.collections.get(collection_name)\n\n# Batch import 50 arbitrary objects\nwith collection.batch.dynamic() as batch:\n    for i in range(50):\n        batch.add_object(\n            properties={\n                \"name\": f\"Product {i}\",\n                \"description\": f\"Description {i}\"\n            }\n        )\n\n# Print the number of objects in the collection\ncount = collection.aggregate.over_all(total_count=True)\nprint(f\"Number of objects in '{collection_name}': {count.total_count}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- The script connects to Weaviate Cloud using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n- It creates a collection named `\"DemoProducts\"` with two text properties: `\"name\"` and `\"description\"`.\n- It batch imports 50 simple objects into the collection.\n- Finally, it prints the total number of objects in the collection.",
      "stdout": "Number of objects in 'DemoProducts': 50\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "simple_example_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:24:28.540222",
      "duration": 15.147002935409546,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "Here's the complete Python code using the latest Weaviate client syntax, following your instructions exactly:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=AuthApiKey(os.getenv(\"WCD_TEST_KEY\")),\n)\n\n# Get the collection named \"DemoProducts\"\ncollection = client.collections.get(\"DemoProducts\")\n\n# Prepare 50 arbitrary objects\ndata_rows = [\n    {\n        \"name\": f\"Product {i}\",\n        \"description\": f\"Description {i}\"\n    }\n    for i in range(50)\n]\n\n# Batch import objects into the collection\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(properties=data_row)\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\n# Check for any failed imports\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\n# Print the number of objects in the collection\nprint(f\"Total objects in collection: {len(collection)}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n- Connects to Weaviate Cloud using environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n- Retrieves the existing collection named `\"DemoProducts\"`.\n- Creates and batch-imports 50 arbitrary objects with properties `\"name\"` and `\"description\"`.\n- Checks and reports any failed imports.\n- Prints the total number of objects in the collection.\n- Closes the client connection.",
      "stdout": "Total objects in collection: 50\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:24:48.328731",
      "duration": 19.22708511352539,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is a concise Python script using the latest Weaviate Python client syntax to:\n\n- Connect to Weaviate Cloud using environment variables.\n- Create a collection named \"DemoProducts\" with properties \"name\" and \"description\".\n- Batch import 50 arbitrary objects.\n- Print the number of objects in the collection.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType, Configure\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\n# Create the \"DemoProducts\" collection with properties \"name\" and \"description\"\nif client.collections.exists(\"DemoProducts\"):\n    client.collections.delete(\"DemoProducts\")\n\nclient.collections.create(\n    name=\"DemoProducts\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.none()  # No vectorizer for simplicity\n)\n\n# Get the collection\ncollection = client.collections.get(\"DemoProducts\")\n\n# Batch import 50 arbitrary objects\nwith collection.batch.dynamic() as batch:\n    for i in range(50):\n        batch.add_object(\n            properties={\n                \"name\": f\"Product {i}\",\n                \"description\": f\"Description {i}\"\n            }\n        )\n\n# Print the number of objects in the collection\nobject_count = collection.aggregate.over_all(total_count=True).total_count\nprint(f\"Number of objects in 'DemoProducts': {object_count}\")\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- **Connection**: Uses environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` to securely connect to Weaviate Cloud.\n- **Collection Creation**: Checks if the collection exists and deletes it first to ensure a clean start.\n- **Batch Import**: Uses dynamic batching for efficient import of 50 simple objects.\n- **Counting Objects**: Uses aggregation to retrieve and print the total number of objects in the collection.\n- **Cleanup**: Closes the client connection at the end.",
      "stdout": "Number of objects in 'DemoProducts': 50\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "zero_shot_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:25:04.865889",
      "duration": 16.221602201461792,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Here's the Python code using the latest Weaviate Python client syntax to query your `WineReview` collection:\n\n```python\nimport weaviate\nimport os\n\n# Connect to Weaviate Cloud instance using environment variables\nclient = weaviate.connect_to_wcs(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=weaviate.auth.AuthApiKey(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-Api-Key\": os.getenv(\"OPENAI_API_KEY\")\n    }\n)\n\n# Perform a similarity search for \"dessert wine\"\nresponse = client.collections.get(\"WineReview\").query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Print the results\nfor wine in response.objects:\n    properties = wine.properties\n    print(f\"Title: {properties.get('title')}\")\n    print(f\"Country: {properties.get('country')}\")\n    print(f\"Price: {properties.get('price')}\")\n    print(f\"Points: {properties.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n- Connects to Weaviate Cloud using environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n- Sets the OpenAI API key via the `X-OpenAI-Api-Key` header using the environment variable `OPENAI_API_KEY`.\n- Queries the `WineReview` collection using a semantic search (`near_text`) for the phrase \"dessert wine\".\n- Limits the results to a maximum of 2.\n- Prints the `title`, `country`, `price`, and `points` of each matching wine.\n- Closes the client connection after the query.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "simple_example_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:25:19.274312",
      "duration": 14.143714189529419,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Here's the Python code using the latest Weaviate client syntax, adapted to your requirements:\n\n```python\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-API-Key\": os.getenv(\"OPENAI_API_KEY\")\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Perform a near_text query for \"dessert wine\" with a limit of 2 results\nresponse = collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Print the title, country, price, and points of each matching wine\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n- The Weaviate Cloud URL and API keys are securely loaded from environment variables (`WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY`).\n- The query searches the `WineReview` collection using the `near_text` method with the query `\"dessert wine\"`.\n- The results are limited to a maximum of 2.\n- The properties `title`, `country`, `price`, and `points` are printed for each matching wine.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:25:38.674653",
      "duration": 19.06558394432068,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is Python code using the latest Weaviate Python client syntax to query the `WineReview` collection for wines that best match the query \"dessert wine\", limiting the results to a maximum of 2. The code connects to Weaviate Cloud using environment variables for authentication and prints the title, country, price, and points of each matching wine.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Get the WineReview collection\nwine_collection = client.collections.get(\"WineReview\")\n\n# Perform a semantic search using near_text\nresponse = wine_collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor wine in response.objects:\n    props = wine.properties\n    print(f\"Title: {props.get('title', 'N/A')}\")\n    print(f\"Country: {props.get('country', 'N/A')}\")\n    print(f\"Price: {props.get('price', 'N/A')}\")\n    print(f\"Points: {props.get('points', 'N/A')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- **Connection**: The client connects to Weaviate Cloud using the provided environment variables:\n  - `WCD_TEST_URL`: URL of your Weaviate Cloud instance.\n  - `WCD_TEST_KEY`: API key for your Weaviate Cloud instance.\n  - `OPENAI_API_KEY`: API key for OpenAI, required for the `text2vec-openai` vectorizer.\n\n- **Query**: The `near_text` query searches semantically for wines matching \"dessert wine\".\n\n- **Limit**: The query limits the results to a maximum of 2.\n\n- **Output**: The script prints the `title`, `country`, `price`, and `points` of each matching wine.\n\n- **Cleanup**: The client connection is closed after the query completes.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:25:57.404134",
      "duration": 18.4516658782959,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Here's the Python code using the latest Weaviate Python client syntax to perform the described query:\n\n```python\nimport weaviate\nimport os\n\n# Connect to Weaviate Cloud instance\nclient = weaviate.connect_to_wcs(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=weaviate.auth.AuthApiKey(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-Api-Key\": os.getenv(\"OPENAI_API_KEY\")\n    }\n)\n\n# Perform hybrid search query with filters\nresponse = (\n    client.collections.get(\"WineReview\")\n    .query.hybrid(\n        query=\"pair with steak\",\n        alpha=0.5,\n        filters=(\n            weaviate.classes.Filter(\"price\").less_than(50)\n            & weaviate.classes.Filter(\"points\").greater_than(90)\n            & (\n                weaviate.classes.Filter(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n            )\n        ),\n        limit=5\n    )\n)\n\n# Print the results\nfor wine in response.objects:\n    properties = wine.properties\n    print(f\"Title: {properties.get('title')}\")\n    print(f\"Country: {properties.get('country')}\")\n    print(f\"Price: {properties.get('price')}\")\n    print(f\"Points: {properties.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- Connects to Weaviate Cloud using environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n- Sets the OpenAI API key via the header `X-OpenAI-Api-Key` from the environment variable `OPENAI_API_KEY`.\n- Performs a hybrid search (`alpha=0.5`) on the `WineReview` collection with the query `\"pair with steak\"`.\n- Applies filters:\n  - `price < 50`\n  - `points > 90`\n  - `review_body` contains at least one of the substrings `\"spice\"`, `\"fruit\"`, `\"berry\"`, `\"cherry\"`, or `\"honey\"`.\n- Limits the results to a maximum of 5.\n- Prints the `title`, `country`, `price`, and `points` of each matching wine.\n- Closes the client connection after the query.",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 20, in <module>\n    weaviate.classes.Filter(\"price\").less_than(50)\nAttributeError: module 'weaviate.classes' has no attribute 'Filter'\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n  warnings.warn(\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:26:18.986112",
      "duration": 21.296022176742554,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Here's the complete Python code using the latest Weaviate client syntax, following your instructions exactly:\n\n```python\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.getenv(\"WCD_TEST_URL\"),\n    auth_credentials=Auth.api_key(os.getenv(\"WCD_TEST_KEY\")),\n    headers={\n        \"X-OpenAI-API-Key\": os.getenv(\"OPENAI_API_KEY\")\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Perform hybrid search query with filters\nresponse = collection.query.hybrid(\n    query=\"pair with steak\",\n    limit=5,\n    alpha=0.5,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\n# Print the title, country, price, and points of each matching wine\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- **Environment Variables**:  \n  - `WCD_TEST_URL`: URL of your Weaviate Cloud instance  \n  - `WCD_TEST_KEY`: API key for your Weaviate Cloud instance  \n  - `OPENAI_API_KEY`: API key for OpenAI (used by the text2vec-openai vectorizer)\n\n- **Hybrid Search**:  \n  - `query`: \"pair with steak\"  \n  - `limit`: 5 results maximum  \n  - `alpha`: 0.5 (equal weighting between vector and keyword search)\n\n- **Filters**:  \n  - `price` less than 50  \n  - `points` greater than 90  \n  - `review_body` contains at least one substring from [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n\n- **Output**:  \n  Prints the `title`, `country`, `price`, `points`, and hybrid search `score` for each matching wine.",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir\nCountry: US\nPrice: 40.0\nPoints: 92\nScore: 0.5\n----------------------------------------\nTitle: Bink 2014 Pinot Noir (Anderson Valley)\nCountry: US\nPrice: 49.0\nPoints: 91\nScore: 0.46207502484321594\n----------------------------------------\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza)\nCountry: Argentina\nPrice: 27.0\nPoints: 91\nScore: 0.21977002918720245\n----------------------------------------\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji)\nCountry: Hungary\nPrice: 25.0\nPoints: 93\nScore: 0.06533736735582352\n----------------------------------------\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux\nCountry: France\nPrice: 0.0\nPoints: 94\nScore: 0.018121296539902687\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:26:41.019301",
      "duration": 21.746339082717896,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here is Python code using the latest Weaviate Python client syntax to perform the requested query:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, HybridFusion\n\n# Connect to Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Get the WineReview collection\nwine_collection = client.collections.get(\"WineReview\")\n\n# Define the filter conditions\nprice_filter = Filter.by_property(\"price\").less_than(50)\npoints_filter = Filter.by_property(\"points\").greater_than(90)\n\n# Define substring filters for review_body\nsubstring_filters = (\n    Filter.by_property(\"review_body\").like(\"*spice*\") |\n    Filter.by_property(\"review_body\").like(\"*fruit*\") |\n    Filter.by_property(\"review_body\").like(\"*berry*\") |\n    Filter.by_property(\"review_body\").like(\"*cherry*\") |\n    Filter.by_property(\"review_body\").like(\"*honey*\")\n)\n\n# Combine all filters\ncombined_filter = price_filter & points_filter & substring_filters\n\n# Perform hybrid search\nresponse = wine_collection.query.hybrid(\n    query=\"pair with steak\",\n    alpha=0.5,\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    filters=combined_filter,\n    limit=5,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor wine in response.objects:\n    props = wine.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n### Explanation:\n\n- **Connection**: Connects to Weaviate Cloud using environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY`.\n- **Filters**: Applies filters for `price < 50`, `points > 90`, and ensures the `review_body` contains at least one of the specified substrings.\n- **Hybrid Search**: Performs a hybrid search with `alpha=0.5` to balance semantic and keyword search relevance.\n- **Results**: Retrieves and prints the `title`, `country`, `price`, and `points` of each matching wine.\n- **Cleanup**: Closes the client connection after the query is complete.",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir\nCountry: US\nPrice: 40.0\nPoints: 92\n----------------------------------------\nTitle: Bink 2014 Pinot Noir (Anderson Valley)\nCountry: US\nPrice: 49.0\nPoints: 91\n----------------------------------------\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza)\nCountry: Argentina\nPrice: 27.0\nPoints: 91\n----------------------------------------\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji)\nCountry: Hungary\nPrice: 25.0\nPoints: 93\n----------------------------------------\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux\nCountry: France\nPrice: 0.0\nPoints: 94\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    }
  },
  "openai/o3-mini-2025-01-31": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:26:54.372814",
      "duration": 13.340850830078125,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "#!/usr/bin/env python3\nimport os\nimport weaviate\n\n# Create a Weaviate client using the URL and API key from the environment variables.\nclient = weaviate.Client(\n    url=os.environ[\"WCD_TEST_URL\"],\n    auth_client_secret=weaviate.AuthApiKey(api_key=os.environ[\"WCD_TEST_KEY\"])\n)\n\n# Check if the Weaviate server is ready to accept requests.\nif client.is_ready():\n    print(\"Weaviate Cloud instance is ready to accept requests.\")\nelse:\n    print(\"Weaviate Cloud instance is not ready to accept requests.\")",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:6: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 6, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:27:02.253475",
      "duration": 7.872722864151001,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "import os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Read environment variables for cluster URL and API key\ncluster_url = os.environ.get(\"WCD_TEST_URL\")\napi_key = os.environ.get(\"WCD_TEST_KEY\")\n\n# Connect to the Weaviate Cloud instance using the provided credentials\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=AuthApiKey(api_key)\n)\n\n# Check that the server is ready to accept requests\nassert client.is_ready()\n\nclient.close()",
      "stdout": "",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:27:14.272582",
      "duration": 12.009412050247192,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "Below is an example Python script that connects to a Weaviate Cloud instance using environment variables, deletes any existing \"DemoProducts\" class, and then creates a new one with the specified properties:\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\n\ndef main():\n    # Retrieve environment variables for URL and API key\n    weaviate_url = os.environ.get(\"WCD_TEST_URL\")\n    weaviate_api_key = os.environ.get(\"WCD_TEST_KEY\")\n    \n    if not weaviate_url or not weaviate_api_key:\n        raise ValueError(\"WCD_TEST_URL and WCD_TEST_KEY environment variables must be set\")\n\n    # Initialize Weaviate client connecting to Weaviate Cloud\n    client = weaviate.Client(\n        url=weaviate_url,\n        additional_headers={\"X-API-KEY\": weaviate_api_key}\n    )\n    \n    class_name = \"DemoProducts\"\n    \n    # Check if class already exists\n    current_schema = client.schema.get()\n    classes = current_schema.get(\"classes\", [])\n    if any(cls.get(\"class\") == class_name for cls in classes):\n        print(f\"Class '{class_name}' exists. Deleting it...\")\n        client.schema.delete_class(class_name)\n    \n    # Define new class with the required properties\n    class_obj = {\n        \"class\": class_name,\n        \"description\": \"A collection to demo products data\",\n        \"properties\": [\n            {\n                \"name\": \"name\",\n                \"dataType\": [\"text\"],\n                \"description\": \"Name of the product\"\n            },\n            {\n                \"name\": \"description\",\n                \"dataType\": [\"text\"],\n                \"description\": \"Description of the product\"\n            },\n            {\n                \"name\": \"price\",\n                \"dataType\": [\"number\"],\n                \"description\": \"Price of the product\"\n            },\n            {\n                \"name\": \"in_stock\",\n                \"dataType\": [\"boolean\"],\n                \"description\": \"Stock status of the product\"\n            }\n        ],\n        # If you are not using automatic vectorization for text fields, specify \"none\"\n        \"vectorizer\": \"none\"\n    }\n    \n    # Create the new class\n    client.schema.create_class(class_obj)\n    print(f\"Class '{class_name}' created successfully.\")\n\nif __name__ == \"__main__\":\n    main()\n------------------------------------------------------------\n\nExplanation:\n1. The script imports os and the latest Weaviate client.\n2. It reads the connection URL and API key from the environment variables WCD_TEST_URL and WCD_TEST_KEY.\n3. It connects to Weaviate Cloud using the provided URL and API key header.\n4. It checks if the \"DemoProducts\" class exists; if so, it deletes the class.\n5. Finally, it creates the \"DemoProducts\" class with the specified properties and sets \"vectorizer\" to \"none\" (adjust if you wish to use Weaviate\u2019s vectorizers).\n\nEnsure that your environment variables are properly set before running the script.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script that connects to a Weaviate Cloud instance using environment variables, deletes any existing \"DemoProducts\" class, and then creates a new one with the specified properties:\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "simple_example_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:27:20.098783",
      "duration": 5.81822395324707,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "Below is the complete Python code using the latest Weaviate client syntax. This script reads the Weaviate Cloud URL and API key from the WCD_TEST_URL and WCD_TEST_KEY environment variables, connects to the Weaviate Cloud instance, deletes the \"DemoProducts\" collection if it already exists, and then creates the collection with the specified properties.\n\n-------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth  # For authentication method\nfrom weaviate.classes.config import Property, DataType\n\n# Retrieve the Weaviate Cloud URL and API key from environment variables\ncluster_url = os.getenv(\"WCD_TEST_URL\")\napi_key = os.getenv(\"WCD_TEST_KEY\")\n\nif cluster_url is None or api_key is None:\n    raise ValueError(\"WCD_TEST_URL and WCD_TEST_KEY environment variables must be set.\")\n\n# Connect to the Weaviate Cloud instance using the API key authentication method\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Collection name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n    print(f\"Deleted existing collection: {collection_name}\")\n\n# Create the new collection with the desired properties\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection if your client supports it\nclient.close()\n-------------------------------------------------------\n\nMake sure to have the Weaviate client installed (for example, using pip install weaviate-client) and that the environment variables are properly set before running the script.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is the complete Python code using the latest Weaviate client syntax. This script reads the Weaviate Cloud URL and API key from the WCD_TEST_URL and WCD_TEST_KEY environment variables, connects to the Weaviate Cloud instance, deletes the \"DemoProducts\" collection if it already exists, and then creates the collection with the specified properties.\n                 ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:27:31.685788",
      "duration": 11.578340768814087,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Below is an example Python script that connects to a Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, deletes the collection \u201cDemoProducts\u201d if it exists, and then creates it with properties for name (text), description (text), price (number), and in_stock (boolean).\n\n------------------------------------------------------------\n#!/usr/bin/env python3\n\"\"\"\nThis script connects to a Weaviate Cloud instance, deletes\nan existing \"DemoProducts\" collection (if present), and creates a\nnew collection with specified properties.\n\nFor more information on using the Weaviate Python client,\nsee: https://weaviate.io/developers/weaviate/client-libraries/python\n\"\"\"\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud using environment variables.\n# WCD_TEST_URL should be the URL of your Weaviate Cloud instance.\n# WCD_TEST_KEY should be your API key for that instance.\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n)\n\n# Check if the \"DemoProducts\" collection already exists.\nif client.collections.exists(\"DemoProducts\"):\n    # Delete the collection if it exists.\n    client.collections.delete(\"DemoProducts\")\n    print('Existing \"DemoProducts\" collection deleted.')\n\n# Define the collection properties.\nproducts_properties = [\n    Property(name=\"name\", data_type=DataType.TEXT),\n    Property(name=\"description\", data_type=DataType.TEXT),\n    Property(name=\"price\", data_type=DataType.NUMBER),\n    Property(name=\"in_stock\", data_type=DataType.BOOL),\n]\n\n# Create the new collection \"DemoProducts\" with the defined properties.\nclient.collections.create(\"DemoProducts\", properties=products_properties)\nprint('\"DemoProducts\" collection created successfully.')\n\n# Optionally, close the client when done.\nclient.close()\n------------------------------------------------------------\n\nMake sure you have set the environment variables WCD_TEST_URL and WCD_TEST_KEY before running this script. For more detailed examples, refer to the Weaviate Python client documentation:\nhttps://weaviate.io/developers/weaviate/client-libraries/python",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script that connects to a Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, deletes the collection \u201cDemoProducts\u201d if it exists, and then creates it with properties for name (text), description (text), price (number), and in_stock (boolean).\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "zero_shot_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:28:08.679599",
      "duration": 36.47546887397766,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "Below is an example using the latest Weaviate Python client. Before running the code, ensure you have installed the weaviate client (for example, via pip install weaviate-client) and that your environment variables WCD_TEST_URL and WCD_TEST_KEY are set.\n\n------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\n\ndef main():\n    # Get the Weaviate Cloud URL and API key from environment variables\n    weaviate_url = os.environ.get(\"WCD_TEST_URL\")\n    weaviate_api_key = os.environ.get(\"WCD_TEST_KEY\")\n    if not weaviate_url or not weaviate_api_key:\n        raise ValueError(\"Both WCD_TEST_URL and WCD_TEST_KEY must be set in your environment.\")\n\n    # Create the Weaviate client using API key authentication.\n    # The latest client accepts an auth_client_secret object for API key auth.\n    client = weaviate.Client(\n        url=weaviate_url,\n        auth_client_secret=weaviate.AuthApiKey(api_key=weaviate_api_key)\n    )\n\n    # Define the \"DemoProducts\" class (if not already present)\n    class_obj = {\n        \"class\": \"DemoProducts\",\n        \"description\": \"A class to store demo products.\",\n        \"properties\": [\n            {\n                \"name\": \"name\",\n                \"dataType\": [\"text\"]\n            },\n            {\n                \"name\": \"description\",\n                \"dataType\": [\"text\"]\n            }\n        ],\n        # since we are providing our own data, disable vectorization.\n        \"vectorizer\": \"none\"\n    }\n\n    # Check if the class/schema exists already. If not, create the class.\n    schema = client.schema.get()\n    classes = schema.get(\"classes\", [])\n    if not any(cls[\"class\"] == \"DemoProducts\" for cls in classes):\n        client.schema.create_class(class_obj)\n        print(\"Created 'DemoProducts' class in the schema.\")\n    else:\n        print(\"'DemoProducts' class already exists in the schema.\")\n\n    # Configure batch mode. (You can adjust the batch size and timeout as needed.)\n    client.batch.configure(batch_size=50, dynamic=False)\n\n    # Batch import 50 objects into \"DemoProducts\" using the batch API.\n    for i in range(50):\n        obj = {\n            \"name\": f\"Product {i}\",\n            \"description\": f\"Description {i}\"\n        }\n        client.batch.add_data_object(data_object=obj, class_name=\"DemoProducts\")\n    \n    # Make sure all batched objects are sent to Weaviate.\n    client.batch.flush()\n    print(\"Batch import completed.\")\n\n    # Fetch all objects in the \"DemoProducts\" class and print the count.\n    # The get API returns a dict with an \"objects\" key.\n    result = client.data_object.get(class_name=\"DemoProducts\")\n    objects = result.get(\"objects\", [])\n    print(f\"Number of objects in 'DemoProducts': {len(objects)}\")\n\nif __name__ == '__main__':\n    main()\n\n------------------------------------------------\n\nExplanation:\n\n1. The script reads the Weaviate Cloud URL and API key from the environment.\n2",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example using the latest Weaviate Python client. Before running the code, ensure you have installed the weaviate client (for example, via pip install weaviate-client) and that your environment variables WCD_TEST_URL and WCD_TEST_KEY are set.\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "simple_example_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:28:27.832515",
      "duration": 18.61778473854065,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "Below is an example Python script that connects to your Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, retrieves the \u201cDemoProducts\u201d collection (class), and then batch imports 50 objects with \u201cname\u201d and \u201cdescription\u201d properties. Finally, it prints out the number of objects in the collection. (Note that this example assumes that your Weaviate schema already has a class named \u201cDemoProducts\u201d defined with the two properties.)\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\n\n# Retrieve Weaviate Cloud URL and API key from environment variables\nweaviate_url = os.environ.get(\"WCD_TEST_URL\")\nweaviate_api_key = os.environ.get(\"WCD_TEST_KEY\")\nif not weaviate_url or not weaviate_api_key:\n    raise ValueError(\"Both WCD_TEST_URL and WCD_TEST_KEY must be set as environment variables.\")\n\n# Connect to the Weaviate Cloud instance using the latest client methodology\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=weaviate_url,\n    auth_credentials=weaviate.AuthApiKey(weaviate_api_key)\n)\n\n# Get the \"DemoProducts\" collection (class) from Weaviate.\n# (It is assumed that this class exists in your schema.)\ncollection = client.collections.get(\"DemoProducts\")\n\n# Create 50 objects with arbitrary data.\ndata_rows = [\n    {\"name\": f\"Product {i}\", \"description\": f\"Description {i}\"}\n    for i in range(1, 51)  # Products 1 to 50\n]\n\n# Batch import the objects using the dynamic batch API.\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(properties=data_row)\n        # Optionally, check if errors have reached a threshold.\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\n# Report if there were any objects that failed to import.\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\n# Print the number of objects in the collection.\n# (Under the hood, this uses the collection\u2019s __len__() method to query the count)\nprint(\"Number of objects in 'DemoProducts':\", len(collection))\n\n# Close the client connection",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script that connects to your Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, retrieves the \u201cDemoProducts\u201d collection (class), and then batch imports 50 objects with \u201cname\u201d and \u201cdescription\u201d properties. Finally, it prints out the number of objects in the collection. (Note that this example assumes that your Weaviate schema already has a class named \u201cDemoProducts\u201d defined with the two properties.)\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:28:38.547168",
      "duration": 10.178843259811401,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Below is an example Python script using the latest Weaviate client syntax that connects to Weaviate Cloud (using the environment variables WCD_TEST_URL and WCD_TEST_KEY), creates a collection called \"DemoProducts\" with text properties \u201cname\u201d and \u201cdescription\u201d (if it does not already exist), batch imports 50 objects, and finally prints the number of objects in the collection.\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# ------------------------------------------------------------------------------\n# 1. CONNECT TO WEAVIATE CLOUD\n# ------------------------------------------------------------------------------\n# Ensure that the following environment variables are set:\n#   WCD_TEST_URL  - The URL of your Weaviate Cloud instance.\n#   WCD_TEST_KEY  - The API key for your Weaviate Cloud instance.\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\n# ------------------------------------------------------------------------------\n# 2. CREATE/GET COLLECTION \"DemoProducts\"\n# ------------------------------------------------------------------------------\n# Check if the collection already exists; if not, create it.\ncollection_name = \"DemoProducts\"\nif not client.collections.exists(collection_name):\n    client.collections.create(\n        collection_name,\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT)\n        ]\n    )\n\n# Get the collection handle for further operations.\ndemo_products = client.collections.get(collection_name)\n\n# ------------------------------------------------------------------------------\n# 3. BATCH IMPORT 50 OBJECTS INTO THE COLLECTION\n# ------------------------------------------------------------------------------\n# We use the dynamic batch mode for efficient import.\nwith demo_products.batch.dynamic() as batch:\n    for i in range(50):\n        # Each object has a \"name\" and \"description\" property.\n        batch.add_object(\n            properties={\n                \"name\": f\"Product {i}\",\n                \"description\": f\"Description {i}\"\n            }\n        )\n\n# ------------------------------------------------------------------------------\n# 4. PRINT THE NUMBER OF OBJECTS IN THE COLLECTION\n# ------------------------------------------------------------------------------\n# We can use an aggregate GraphQL query to count the objects.\n# The aggregate query requests meta information (including count) for the collection.\naggregate_response = client.query.aggregate(collection_name)\\\n    .with_fields(\"meta { count }\")\\\n    .do()\n\n# Extract the count from the returned JSON structure.\n# The response structure looks like:\n# { \"data\": { \"Aggregate\": { \"DemoProducts\": [ { \"meta\": { \"count\": <number> } } ] } } }\ncount = aggregate_response[\"data\"][\"Aggregate\"][collection_name][0][\"meta\"][\"count\"]\nprint(f\"Number of objects in '{collection_name}': {count}\")\n\n# ------------------------------------------------------------------------------\n# 5. CLEANUP: CLOSE THE CLIENT\n# ------------------------------------------------------------------------------\nclient.close()\n\n------------------------------------------------------------\n\nAdditional information and detailed examples for operations like collection management and batch imports can be found in the Weaviate documentation:\n\u2022 Python Client Library: https://weaviate.io/developers/weaviate/client-libraries/python\n\u2022 Batch Import: https://weaviate.io/developers/weaviate/manage-data/import\n\nThis script demonstrates a minimal end-to-end example; you may adapt or extend it to better suit your use case.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script using the latest Weaviate client syntax that connects to Weaviate Cloud (using the environment variables WCD_TEST_URL and WCD_TEST_KEY), creates a collection called \"DemoProducts\" with text properties \u201cname\u201d and \u201cdescription\u201d (if it does not already exist), batch imports 50 objects, and finally prints the number of objects in the collection.\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:28:47.582317",
      "duration": 8.733635902404785,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "#!/usr/bin/env python3\n\"\"\"\nThis script connects to a Weaviate Cloud instance and queries the \"WineReview\"\nclass to find wines that best match the text query \"dessert wine\". It returns at\nmost 2 results and prints out the title, country, price, and points for each\nmatching wine.\n\nMake sure the following environment variables are set:\n  - WCD_TEST_URL: URL for your Weaviate Cloud instance.\n  - WCD_TEST_KEY: API key for the Weaviate Cloud instance.\n  - OPENAI_API_KEY: API key needed for the text2vec-openai vectorizer.\n\"\"\"\n\nimport os\nimport weaviate\n\n# Retrieve the environment variables.\nweaviate_url = os.environ.get(\"WCD_TEST_URL\")\nweaviate_api_key = os.environ.get(\"WCD_TEST_KEY\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n\nif not weaviate_url or not weaviate_api_key or not openai_api_key:\n    raise ValueError(\"One or more of the required environment variables are missing.\")\n\n# Initialize the Weaviate client for Weaviate Cloud.\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=weaviate.AuthApiKey(api_key=weaviate_api_key)\n)\n\n# Pass the OpenAI API key via additional headers (required by text2vec-openai).\nclient.set_additional_headers({\n    \"X-Openai-Api-Key\": openai_api_key\n})\n\n# Build the query:\n# - Query the \"WineReview\" collection.\n# - Use nearText to find wines matching the concept \"dessert wine\".\n# - Limit the number of results to 2.\nquery_result = (\n    client.query.get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"])\n    .with_near_text({\"concepts\": [\"dessert wine\"]})\n    .with_limit(2)\n    .do()\n)\n\n# Extract the results from the query response.\nresults = query_result.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", [])\n\n# Print the desired fields for each matching wine.\nfor wine in results:\n    title = wine.get(\"title\", \"N/A\")\n    country = wine.get(\"country\", \"N/A\")\n    price = wine.get(\"price\", \"N/A\")\n    points = wine.get(\"points\", \"N/A\")\n    print(f\"Title: {title}\")\n    print(f\"Country: {country}\")\n    print(f\"Price: {price}\")\n    print(f\"Points: {points}\")\n    print(\"-\" * 30)",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:26: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 26, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:28:58.700357",
      "duration": 10.848340034484863,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Below is an example of how you can achieve this using the latest Weaviate client syntax:\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Read environment variable values\ncluster_url = os.environ.get(\"WCD_TEST_URL\")\nwcd_api_key = os.environ.get(\"WCD_TEST_KEY\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n\nif not (cluster_url and wcd_api_key and openai_api_key):\n    raise EnvironmentError(\"One or more required environment variables are missing.\")\n\n# Connect to your Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(wcd_api_key),\n    headers={\"X-OpenAI-API-Key\": openai_api_key}\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Query the collection using near_text with the query \"dessert wine\"\nresponse = collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Loop over each matching object and print the selected properties.\n# It is assumed that each object has properties: title, country, price, and points.\nfor obj in response.objects:\n    props = obj.properties\n    title = props.get(\"title\", \"N/A\")\n    country = props.get(\"country\", \"N/A\")\n    price = props.get(\"price\", \"N/A\")\n    points = props.get(\"points\", \"N/A\")\n    print(f\"Title: {title}\")\n    print(f\"Country: {country}\")\n    print(f\"Price: {price}\")\n    print(f\"Points: {points}\")\n    print(\"-\" * 40)\n\n# Close the connection\nclient.close()\n------------------------------------------------------------\n\nExplanation:\n\n1. We import os and weaviate along with the Auth class that lets us pass the API key.\n2. The code reads the Weaviate Cloud URL (WCD_TEST_URL), the Cloud API key (WCD_TEST_KEY), and the OpenAI API key (OPENAI_API_KEY) from the environment.\n3. The client is connected to Weaviate Cloud using the provided credentials. The OpenAI API key is sent along via the headers.\n4. We get the \"WineReview\" collection and run a near_text query for \"dessert wine\" with a limit of 2.\n5. Finally, for each result returned, we print the wine\u2019s title, country, price, and points, then close the client connection.\n\nMake sure that you have the necessary environment variables set and the latest Weaviate Python client installed before running this script.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example of how you can achieve this using the latest Weaviate client syntax:\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:29:15.994826",
      "duration": 16.934248208999634,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Below is an example Python script using the latest Weaviate client syntax. This script connects to a Weaviate Cloud instance (using the environment variables WCD_TEST_URL and WCD_TEST_KEY) and authenticates with the OpenAI API key (stored in OPENAI_API_KEY). It then queries the \"WineReview\" collection using a near_text search for the query \"dessert wine\" and prints the title, country, price, and points for each of up to 2 matching wines.\n\n--------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud using env vars:\n#   WCD_TEST_URL is the cluster URL\n#   WCD_TEST_KEY is the API key for the Cloud instance\n# Also include the OpenAI API Key header for the text2vec_openai vectorizer.\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Get the 'WineReview' collection\nwine_collection = client.collections.get(\"WineReview\")\n\n# Query the collection using a near_text search for \"dessert wine\", with a maximum of 2 results.\nresponse = wine_collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Print the title, country, price, and points for each matching wine.\nfor wine in response.objects:\n    props = wine.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\n# Optionally, close the client when done:\nclient.close()\n\n--------------------------------------------------\n\nNotes:\n\u2022 For more details on the Weaviate Python client (v4.x) and available query options, see:\n  https://weaviate.io/developers/weaviate/client-libraries/python\n\u2022 Ensure that the environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are properly set before running the script.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script using the latest Weaviate client syntax. This script connects to a Weaviate Cloud instance (using the environment variables WCD_TEST_URL and WCD_TEST_KEY) and authenticates with the OpenAI API key (stored in OPENAI_API_KEY). It then queries the \"WineReview\" collection using a near_text search for the query \"dessert wine\" and prints the title, country, price, and points for each of up to 2 matching wines.\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:29:33.398573",
      "duration": 17.11562204360962,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Below is an example Python script that connects to Weaviate Cloud with the provided environment variables, and performs a hybrid search on the WineReview collection using text2vec-openai. It applies a filter that returns wines with a price less than 50, points greater than 90, and whose review_body contains at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\". The hybrid search is done with a query \u201cpair with steak\u201d using alpha=0.5 and returns up to 5 results. Make sure you have installed the latest Weaviate Python client (e.g. via pip install weaviate-client).\n\n----------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\n\ndef main():\n    # Retrieve environment variables\n    wc_url = os.getenv(\"WCD_TEST_URL\")\n    wc_key = os.getenv(\"WCD_TEST_KEY\")\n    openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n\n    if not (wc_url and wc_key and openai_api_key):\n        raise ValueError(\"Please make sure WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are set in your environment.\")\n\n    # Create a client connection to Weaviate Cloud\n    client = weaviate.Client(\n        url=wc_url,\n        auth_client_secret=weaviate.AuthApiKey(api_key=wc_key),\n        additional_headers={\"X-Openai-Api-Key\": openai_api_key}\n    )\n\n    # Build a where filter:\n    #   - price < 50\n    #   - points > 90\n    #   - review_body contains at least one of the substrings (\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\")\n    where_filter = {\n        \"operator\": \"And\",\n        \"operands\": [\n            {\n                \"path\": [\"price\"],\n                \"operator\": \"LessThan\",\n                \"valueNumber\": 50\n            },\n            {\n                \"path\": [\"points\"],\n                \"operator\": \"GreaterThan\",\n                \"valueNumber\": 90\n            },\n            {\n                \"operator\": \"Or\",\n                \"operands\": [\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": \"*spice*\"\n                    },\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": \"*fruit*\"\n                    },\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": \"*berry*\"\n                    },\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": \"*cherry*\"\n                    },\n                    {\n                        \"path\": [\"review_body\"],\n                        \"operator\": \"Like\",\n                        \"valueString\": \"*honey*\"\n                    }\n                ]\n            }\n        ]\n    }\n\n    # Execute the query using a hybrid search\n    try:\n        result = (\n            client.query\n            .get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"])\n            .with_hybrid(query=\"pair with steak\", alpha=0.5)\n            .with_where(where_filter)\n            .with_limit(5)\n            .do()\n        )\n    except Exception as e:\n        print(\"Error running the query:\", e)\n        return\n\n    # Process and print the results\n    reviews = result.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", [])\n    if not reviews:\n        print(\"No matching wines found.\")\n        return\n\n    for wine in reviews:\n        title   = wine.get(\"title\", \"N/A\")\n        country = wine.get(\"country\", \"N/A\")\n        price   = wine.get(\"price\", \"N/A\")\n        points  = wine.get(\"points\", \"N/A\")\n        print(f\"Title: {title}\\nCountry: {country}\\nPrice: {price}\\nPoints: {points}\\n{'-'*40}\")\n\nif __name__ == \"__main__\":\n    main()\n\n----------------------------------------------------------------\n\nEnsure that your environment has the variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY set before running this script. This code uses the latest client syntax to perform a hybrid search and apply the necessary filtering conditions.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script that connects to Weaviate Cloud with the provided environment variables, and performs a hybrid search on the WineReview collection using text2vec-openai. It applies a filter that returns wines with a price less than 50, points greater than 90, and whose review_body contains at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\". The hybrid search is done with a query \u201cpair with steak\u201d using alpha=0.5 and returns up to 5 results. Make sure you have installed the latest Weaviate Python client (e.g. via pip install weaviate-client).\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:29:55.594916",
      "duration": 21.919580936431885,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Below is an example using the latest Weaviate client syntax. Make sure you have set the environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY before running the code.\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth  # For API key authentication\nfrom weaviate.classes.query import Filter, MetadataQuery\n\n# Retrieve the required environment variables\ncluster_url = os.environ.get(\"WCD_TEST_URL\")\nwcd_api_key = os.environ.get(\"WCD_TEST_KEY\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n\nif not cluster_url or not wcd_api_key or not openai_api_key:\n    raise ValueError(\"Environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY must be set.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(wcd_api_key),\n    headers={\"X-OpenAI-API-Key\": openai_api_key},\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Define the query parameters\nsearch_query = \"pair with steak\"\nmax_results = 5\nalpha = 0.5\n\n# Build the filters:\n# - price must be less than 50\n# - points must be greater than 90\n# - review_body must contain at least one of the keywords.\nfilters = (\n    Filter.by_property(\"price\").less_than(50) &\n    Filter.by_property(\"points\").greater_than(90) &\n    Filter.by_property(\"review_body\").contains_any(\n        [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n    )\n)\n\n# Run the hybrid search query using the text2vec-openai vectorizer in WineReview collection\nresponse = collection.query.hybrid(\n    query=search_query,\n    limit=max_results,\n    alpha=alpha,\n    filters=filters,\n    return_metadata=MetadataQuery(score=True)\n)\n\n# Print the relevant properties for each matching wine: title, country, price, and points.\nprint(\"Matching Wines:\")\nfor obj in response.objects:\n    props = obj.properties\n    title = props.get(\"title\")\n    country = props.get(\"country\")\n    price = props.get(\"price\")\n    points = props.get(\"points\")\n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n    print(f\"Score: {obj.metadata.score}\\n\")\n\n# Close the client connection\nclient.close()\n------------------------------------------------------------\n\nExplanation:\n1. We import the required modules and pull the necessary API keys and cluster URL from the environment.\n2. The client is connected to Weaviate Cloud using the API key provided for both the Weaviate Cloud and OpenAI.\n3. We retrieve the WineReview collection.\n4. The query is executed as a hybrid search with the query \"pair with steak\", a result limit of 5, and alpha set to 0.5.\n5. We combine three filters using logical AND (&):\n   \u2022 Price is less than 50.\n   \u2022 Points are greater than 90.\n   \u2022 review_body contains at least one keyword from [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"].\n6. Finally, for each matching wine, the code prints the title, country, price, and points together with the result\u2019s score.\n\nThis example should serve as a complete solution using the latest Weaviate client syntax.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example using the latest Weaviate client syntax. Make sure you have set the environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY before running the code.\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:30:13.635597",
      "duration": 17.73509979248047,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Below is an example Python script that uses the latest Weaviate client syntax to connect to a Weaviate Cloud instance, query the WineReview collection using a hybrid search (with \u03b1 = 0.5), and only return wines that satisfy the following conditions:\n\n\u2022 The wine best matches the query \"pair with steak\"  \n\u2022 The result list is limited to 5 objects  \n\u2022 Each wine has price < 50  \n\u2022 Each wine has points > 90  \n\u2022 The review_body contains at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\"\n\nMake sure you have the environment variables set:\n\u2003\u2022 OPENAI_API_KEY  \n\u2003\u2022 WCD_TEST_URL\u2003 (Weaviate Cloud instance URL)  \n\u2003\u2022 WCD_TEST_KEY\u2003 (Weaviate Cloud API key)\n\nYou can learn more about using filters and hybrid search on the Weaviate documentation pages:\nhttps://weaviate.io/developers/weaviate/search\n\nBelow is the complete code:\n\n------------------------------------------------------------\n#!/usr/bin/env python3\nimport os\nimport weaviate\n\n# Read API keys and URLs from environment variables\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to Weaviate Cloud with API-key authentication\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=weaviate.AuthApiKey(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-Api-Key\": OPENAI_API_KEY\n    }\n)\n\n# Retrieve the WineReview collection (class)\nwine_review = client.collections.get(\"WineReview\")\n\n# Define the where filter object to enforce:\n# - price less than 50\n# - points greater than 90\n# - review_body LIKE one of required substrings\nfilter_conditions = {\n    \"operator\": \"And\",\n    \"operands\": [\n        {\n            \"path\": [\"price\"],\n            \"operator\": \"LessThan\",\n            \"valueNumber\": 50\n",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Below is an example Python script that uses the latest Weaviate client syntax to connect to a Weaviate Cloud instance, query the WineReview collection using a hybrid search (with \u03b1 = 0.5), and only return wines that satisfy the following conditions:\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    }
  },
  "openai/chatgpt-4o-latest": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:30:17.112663",
      "duration": 3.465954065322876,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "Sure! Here's Python code using the latest Weaviate client syntax (as of 2024) to connect to a Weaviate Cloud instance using environment variables WCD_TEST_URL and WCD_TEST_KEY, and then check if the server is ready:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Load environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\n\n# Ensure the environment variables are set\nif not weaviate_url or not weaviate_api_key:\n    raise EnvironmentError(\"WCD_TEST_URL and WCD_TEST_KEY must be set in the environment.\")\n\n# Create authentication object\nauth_config = AuthApiKey(api_key=weaviate_api_key)\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=auth_config,\n)\n\n# Check if the server is ready\nif client.is_ready():\n    print(\"Weaviate server is ready to accept requests.\")\nelse:\n    print(\"Weaviate server is not ready.\")\n```\n\nMake sure you have the latest weaviate-client installed:\n\n```bash\npip install --upgrade weaviate-client\n```\n\nThis script only connects and checks readiness\u2014no other operations are performed.",
      "stdout": "",
      "stderr": "/code/code.py:17: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 17, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:30:18.709525",
      "duration": 1.589332103729248,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "Sure! Here's the Python code using the latest Weaviate client syntax to connect to a Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, and then check if the server is ready:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Load environment variables\ncluster_url = os.environ[\"WCD_TEST_URL\"]\napi_key = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Check if the server is ready\nassert client.is_ready()\n\n# Close the client connection\nclient.close()",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Sure! Here's the Python code using the latest Weaviate client syntax to connect to a Weaviate Cloud instance using the environment variables WCD_TEST_URL and WCD_TEST_KEY, and then check if the server is ready:\n        ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "zero_shot_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:30:34.870986",
      "duration": 16.15182900428772,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "Sure! Here's Python code using the latest Weaviate client syntax (as of 2024) to connect to a Weaviate Cloud instance using environment variables, delete the \"DemoProducts\" collection if it exists, and create it with the specified properties:\n\nMake sure you have the weaviate-client installed:\n\npip install weaviate-client\n\nThen, use the following code:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.collections.classes.config import Property, DataType\n\n# Load environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\n\nif not weaviate_url or not weaviate_api_key:\n    raise EnvironmentError(\"WCD_TEST_URL and WCD_TEST_KEY must be set in environment variables.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=weaviate_url,\n    auth_credentials=weaviate.auth.AuthApiKey(weaviate_api_key),\n)\n\n# Collection name\ncollection_name = \"DemoProducts\"\n\n# Delete collection if it exists\nif collection_name in client.collections.list_all():\n    client.collections.delete(collection_name)\n    print(f\"Deleted existing collection: {collection_name}\")\n\n# Define collection schema\nproperties = [\n    Property(name=\"name\", data_type=DataType.TEXT),\n    Property(name=\"description\", data_type=DataType.TEXT),\n    Property(name=\"price\", data_type=DataType.NUMBER),\n    Property(name=\"in_stock\", data_type=DataType.BOOL),\n]\n\n# Create the collection\nclient.collections.create(\n    name=collection_name,\n    properties=properties,\n)\n\nprint(f\"Collection '{collection_name}' created successfully.\")\n\n# Close the client connection\nclient.close()\n```\n\nExplanation:\n\n- Connects to Weaviate Cloud using environment variables WCD_TEST_URL and WCD_TEST_KEY.\n- Deletes the \"DemoProducts\" collection if it already exists.\n- Creates a new collection with the specified properties using the latest client syntax (weaviate.collections).\n- Closes the client connection at the end.\n\nMake sure your environment variables are set before running the script:\n\nexport WCD_TEST_URL=\"https://your-instance.weaviate.network\"\nexport WCD_TEST_KEY=\"your-api-key\"\n\nLet me know if you need help inserting data or querying the collection!",
      "stdout": "Deleted existing collection: DemoProducts\nCollection 'DemoProducts' created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "simple_example_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:30:43.118339",
      "duration": 8.237604856491089,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "Sure! Here's the complete Python code using the latest Weaviate client syntax to create a collection named \"DemoProducts\" with the specified properties, connecting to Weaviate Cloud using environment variables WCD_TEST_URL and WCD_TEST_KEY:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Load environment variables\ncluster_url = os.getenv(\"WCD_TEST_URL\")\napi_key = os.getenv(\"WCD_TEST_KEY\")\n\n# Ensure environment variables are set\nif not cluster_url or not api_key:\n    raise EnvironmentError(\"WCD_TEST_URL and WCD_TEST_KEY must be set in environment variables.\")\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Define the collection name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n    print(f\"Deleted existing collection: {collection_name}\")\n\n# Create the new collection with specified properties\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close the client connection\nclient.close()\n\nMake sure you have the weaviate-client installed (version 4.x or later) and that your environment variables WCD_TEST_URL and WCD_TEST_KEY are correctly set before running this script.\n\nYou can set the environment variables in your terminal like this:\n\nexport WCD_TEST_URL=\"https://your-instance.weaviate.network\"\nexport WCD_TEST_KEY=\"your-api-key\"\n\nLet me know if you want to add vectorization or other settings to the collection!",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Sure! Here's the complete Python code using the latest Weaviate client syntax to create a collection named \"DemoProducts\" with the specified properties, connecting to Weaviate Cloud using environment variables WCD_TEST_URL and WCD_TEST_KEY:\n        ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:30:47.478342",
      "duration": 4.347851991653442,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's Python code using the latest Weaviate Python client (v4.x) to:\n\n- Connect to a Weaviate Cloud instance using environment variables WCD_TEST_URL and WCD_TEST_KEY\n- Delete the \"DemoProducts\" collection if it already exists\n- Create a new \"DemoProducts\" collection with the specified properties\n\nfrom weaviate import connect_to_weaviate_cloud\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\nimport os\n\n# Connect to Weaviate Cloud using environment variables\nclient = connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\ntry:\n    # Delete the collection if it already exists\n    if client.collections.exists(\"DemoProducts\"):\n        client.collections.delete(\"DemoProducts\")\n\n    # Create the \"DemoProducts\" collection\n    client.collections.create(\n        name=\"DemoProducts\",\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT),\n            Property(name=\"price\", data_type=DataType.NUMBER),\n            Property(name=\"in_stock\", data_type=DataType.BOOL),\n        ]\n    )\n\n    print(\"Collection 'DemoProducts' created successfully.\")\n\nfinally:\n    # Always close the client when done\n    client.close()\n\nThis code uses the latest v4.x syntax and follows best practices for connection handling and collection management.\n\nFor more information, see:\n- Python Client Library: https://weaviate.io/developers/weaviate/client-libraries/python\n- Collection Management: https://weaviate.io/developers/weaviate/manage-data/collections",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Here's Python code using the latest Weaviate Python client (v4.x) to:\n                                                                         ^\nSyntaxError: EOL while scanning string literal\n",
      "exit_code": 1
    },
    "zero_shot_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:30:54.428099",
      "duration": 6.427037954330444,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "Sure! Below is a complete Python script using the latest Weaviate client syntax (as of 2024) to:\n\n1. Connect to a Weaviate Cloud instance using environment variables.\n2. Create a collection named DemoProducts with text properties name and description.\n3. Batch import 50 simple objects.\n4. Print the number of objects in the collection.\n\nMake sure you have the latest weaviate-client installed:\n\n```bash\npip install weaviate-client --upgrade\n```\n\nHere is the Python code:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.collections.classes.config import Property, DataType\nfrom weaviate.classes.init import AdditionalConfig\n\n# Load environment variables\nWEAVIATE_URL = os.getenv(\"WCD_TEST_URL\")\nWEAVIATE_API_KEY = os.getenv(\"WCD_TEST_KEY\")\n\nif not WEAVIATE_URL or not WEAVIATE_API_KEY:\n    raise EnvironmentError(\"WCD_TEST_URL and WCD_TEST_KEY must be set in environment variables.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=WEAVIATE_URL,\n    auth_credentials=weaviate.auth.AuthApiKey(WEAVIATE_API_KEY),\n    additional_config=AdditionalConfig(timeout=(10, 60))  # Optional: increase timeout for batch ops\n)\n\n# Define the collection schema\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (optional, for clean runs)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\n# Create the collection\nclient.collections.create(\n    name=collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n    ]\n)\n\n# Get the collection object\ncollection = client.collections.get(collection_name)\n\n# Prepare 50 objects\nobjects = [\n    {\n        \"name\": f\"Product {i}\",\n        \"description\": f\"Description {i}\"\n    }\n    for i in range(50)\n]\n\n# Batch import the objects\ncollection.data.insert_many(objects)\n\n# Count and print the number of objects in the collection\ncount = collection.aggregate.over_all(total_count=True).total_count\nprint(f\"Number of objects in '{collection_name}': {count}\")\n\n# Close the client connection\nclient.close()\n```\n\n\u2705 Notes:\n\n- This script assumes you're using the latest Weaviate client (v4+).\n- It uses the new collections API introduced in Weaviate client v4.\n- It uses insert_many for efficient batch import.\n- It uses aggregate.over_all to count the total number of objects.\n\nLet me know if you need a version that works with a local Weaviate instance or older client syntax.",
      "stdout": "Number of objects in 'DemoProducts': 50\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "simple_example_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:31:00.950154",
      "duration": 5.970668077468872,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "Sure! Here's a complete Python script using the latest Weaviate client syntax to:\n\n- Connect to a Weaviate Cloud instance using environment variables WCD_TEST_URL and WCD_TEST_KEY.\n- Create (or get) a collection named DemoProducts with text properties name and description.\n- Batch import 50 objects with arbitrary values.\n- Print the number of objects in the collection.\n\nMake sure you have the latest weaviate-client installed (v4+):\n\npip install weaviate-client --upgrade\n\nHere's the code:\n\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\nfrom weaviate.classes.config import Property, DataType, CollectionConfig\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise EnvironmentError(\"WCD_TEST_URL and WCD_TEST_KEY must be set as environment variables.\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=AuthApiKey(WCD_TEST_KEY),\n)\n\n# Define collection name\ncollection_name = \"DemoProducts\"\n\n# Check if collection exists, if not, create it\nif collection_name not in client.collections.list_all():\n    client.collections.create(\n        config=CollectionConfig(\n            name=collection_name,\n            properties=[\n                Property(name=\"name\", data_type=DataType.TEXT),\n                Property(name=\"description\", data_type=DataType.TEXT),\n            ]\n        )\n    )\n\n# Get the collection\ncollection = client.collections.get(collection_name)\n\n# Prepare 50 objects\ndata_rows = [\n    {\"name\": f\"Product {i+1}\", \"description\": f\"Description {i+1}\"} for i in range(50)\n]\n\n# Batch import\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(properties=data_row)\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\n# Check for failed objects\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\n# Print number of objects in the collection\nprint(f\"Number of objects in '{collection_name}': {len(collection)}\")\n\n# Close the client connection\nclient.close()\n\nThis script will:\n\n- Automatically create the DemoProducts collection if it doesn't exist.\n- Import 50 simple product objects.\n- Print the number of objects in the collection after import.\n\nLet me know if you want to add vectorization or other features!",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Sure! Here's a complete Python script using the latest Weaviate client syntax to:\n        ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:31:06.798743",
      "duration": 5.33415412902832,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's a complete Python script using the latest Weaviate Python client (v4.x) that:\n\n- Connects to a Weaviate Cloud instance using environment variables WCD_TEST_URL and WCD_TEST_KEY.\n- Creates a collection named DemoProducts with name and description properties.\n- Batch imports 50 objects into the collection.\n- Prints the number of objects in the collection.\n\nMake sure you have the weaviate-client package installed (v4.x). You can install it with:\n\npip install weaviate-client>=4.0.0\n\nNow, here's the code:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType, Configure\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\ntry:\n    # Create the collection if it doesn't exist\n    collection_name = \"DemoProducts\"\n    if not client.collections.exists(collection_name):\n        client.collections.create(\n            name=collection_name,\n            properties=[\n                Property(name=\"name\", data_type=DataType.TEXT),\n                Property(name=\"description\", data_type=DataType.TEXT),\n            ],\n            vectorizer_config=Configure.Vectorizer.text2vec_openai()  # Optional: use OpenAI vectorizer\n        )\n\n    # Get the collection\n    collection = client.collections.get(collection_name)\n\n    # Batch import 50 objects\n    with collection.batch.dynamic() as batch:\n        for i in range(50):\n            batch.add_object(\n                properties={\n                    \"name\": f\"Product {i}\",\n                    \"description\": f\"Description {i}\"\n                }\n            )\n\n    # Count the number of objects in the collection\n    count = collection.aggregate.count()\n    print(f\"Number of objects in '{collection_name}': {count}\")\n\nfinally:\n    client.close()\n\nThis script ensures:\n\n- Safe connection handling with try/finally.\n- Dynamic batching for efficient import.\n- Automatic collection creation if it doesn't exist.\n\nLet me know if you want to use a different vectorizer or add more properties!",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Here's a complete Python script using the latest Weaviate Python client (v4.x) that:\n                                                                                        ^\nSyntaxError: EOL while scanning string literal\n",
      "exit_code": 1
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:31:14.468374",
      "duration": 7.3986687660217285,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Sure! Here's Python code using the latest Weaviate client syntax (as of 2024) to query the WineReview collection for wines that best match the query \"dessert wine\", with a limit of 2 results. It uses the text2vec-openai vectorizer and connects to Weaviate Cloud using environment variables.\n\nMake sure you have the weaviate-client installed (version 4.x or later):\n\npip install weaviate-client\n\nThen, use the following code:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Load environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\n\n# Authenticate with Weaviate Cloud\nauth_config = AuthApiKey(api_key=weaviate_api_key)\n\n# Create Weaviate client\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=auth_config,\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key  # For text2vec-openai\n    }\n)\n\n# Perform a semantic search using nearText\nresponse = client.collections.get(\"WineReview\").query.near_text(\n    query=\"dessert wine\",\n    limit=2,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor i, wine in enumerate(response.objects, start=1):\n    props = wine.properties\n    print(f\"Result {i}:\")\n    print(f\"  Title:   {props.get('title')}\")\n    print(f\"  Country: {props.get('country')}\")\n    print(f\"  Price:   {props.get('price')}\")\n    print(f\"  Points:  {props.get('points')}\")\n    print()\n```\n\nThis script:\n\n- Connects to your Weaviate Cloud instance using WCD_TEST_URL and WCD_TEST_KEY.\n- Uses the OpenAI vectorizer (text2vec-openai) with your OpenAI API key.\n- Queries the WineReview collection for the top 2 wines semantically similar to \"dessert wine\".\n- Prints the title, country, price, and points of each result.\n\nLet me know if you need help setting up the environment variables or installing dependencies.",
      "stdout": "",
      "stderr": "/code/code.py:14: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 14, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:31:18.203434",
      "duration": 3.4256954193115234,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Sure! Here's the complete Python code using the latest Weaviate client syntax to query the WineReview collection for wines that best match the query \"dessert wine\", with a limit of 2 results. It prints the title, country, price, and points of each matching wine.\n\nMake sure the environment variables OPENAI_API_KEY, WCD_TEST_URL, and WCD_TEST_KEY are set before running the script.\n\nPython Code:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Load environment variables\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Perform a near_text query\nresponse = collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Print selected properties of each matching wine\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n\nThis script will output the top 2 wines that semantically match the query \"dessert wine\", showing their title, country, price, and points.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Sure! Here's the complete Python code using the latest Weaviate client syntax to query the WineReview collection for wines that best match the query \"dessert wine\", with a limit of 2 results. It prints the title, country, price, and points of each matching wine.\n        ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:31:23.574309",
      "duration": 5.100419044494629,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's the Python code using the latest Weaviate Python client (v4.x) to connect to a Weaviate Cloud instance and perform a semantic search on the WineReview collection using the query \"dessert wine\". It retrieves up to 2 results and prints the title, country, price, and points for each result:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\ntry:\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Perform semantic search using near_text\n    response = collection.query.near_text(\n        query=\"dessert wine\",\n        limit=2,\n        return_properties=[\"title\", \"country\", \"price\", \"points\"]\n    )\n\n    # Print the results\n    for obj in response.objects:\n        props = obj.properties\n        print(\"Title:\", props.get(\"title\"))\n        print(\"Country:\", props.get(\"country\"))\n        print(\"Price:\", props.get(\"price\"))\n        print(\"Points:\", props.get(\"points\"))\n        print(\"-\" * 40)\n\nfinally:\n    # Close the client connection\n    client.close()\n\nMake sure the environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are set before running this script.\n\nThis code uses the near_text semantic search powered by the text2vec-openai vectorizer and retrieves the specified fields from the WineReview collection.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Here's the Python code using the latest Weaviate Python client (v4.x) to connect to a Weaviate Cloud instance and perform a semantic search on the WineReview collection using the query \"dessert wine\". It retrieves up to 2 results and prints the title, country, price, and points for each result:\n                                                                                                                                                                                                                                                                                                           ^\nSyntaxError: EOL while scanning string literal\n",
      "exit_code": 1
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:31:40.069274",
      "duration": 16.21115493774414,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Sure! Here's a complete Python script using the latest Weaviate client syntax (as of 2024) to perform a hybrid search on the WineReview collection with the specified filters:\n\nMake sure you have the weaviate-client installed:\n\npip install weaviate-client\n\nThen, use the following code:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\n# Load environment variables\nweaviate_url = os.getenv(\"WCD_TEST_URL\")\nweaviate_api_key = os.getenv(\"WCD_TEST_KEY\")\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\n\n# Authenticate with Weaviate Cloud\nauth_config = AuthApiKey(api_key=weaviate_api_key)\n\n# Initialize Weaviate client\nclient = weaviate.Client(\n    url=weaviate_url,\n    auth_client_secret=auth_config,\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key  # For text2vec-openai\n    }\n)\n\n# Define the substrings to match in review_body\nkeywords = [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\n# Construct the filter for review_body using OR conditions\nreview_body_filter = {\n    \"operator\": \"Or\",\n    \"operands\": [\n        {\n            \"path\": [\"review_body\"],\n            \"operator\": \"Like\",\n            \"valueText\": f\"*{kw}*\"\n        } for kw in keywords\n    ]\n}\n\n# Combine all filters\nfilters = {\n    \"operator\": \"And\",\n    \"operands\": [\n        {\n            \"path\": [\"price\"],\n            \"operator\": \"LessThan\",\n            \"valueNumber\": 50\n        },\n        {\n            \"path\": [\"points\"],\n            \"operator\": \"GreaterThan\",\n            \"valueNumber\": 90\n        },\n        review_body_filter\n    ]\n}\n\n# Perform hybrid search\nresponse = client.collections.get(\"WineReview\").query.hybrid(\n    query=\"pair with steak\",\n    alpha=0.5,\n    limit=5,\n    filters=filters,\n    return_metadata=[\"score\"],\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print results\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n```\n\nExplanation:\n\n- Uses hybrid search with alpha=0.5 to combine keyword and vector search.\n- Filters for price < 50 and points > 90.\n- Filters review_body to include at least one of the specified substrings using the Like operator.\n- Retrieves and prints title, country, price, and points for each result.\n\nMake sure your WineReview collection is properly configured with the text2vec-openai vectorizer and the fields mentioned.",
      "stdout": "",
      "stderr": "/code/code.py:14: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 14, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:31:45.824836",
      "duration": 5.473369836807251,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Sure! Here's the complete Python code using the latest Weaviate client syntax to query the WineReview collection as per your requirements:\n\n- Hybrid search with alpha=0.5\n- Limit 5 results\n- Filters:\n  - price < 50\n  - points > 90\n  - review_body contains any of: \"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"\n- Print title, country, price, and points\n\nMake sure you have the latest weaviate-client installed (pip install weaviate-client).\n\nPython Code:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Access the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Define the hybrid query\nresponse = collection.query.hybrid(\n    query=\"pair with steak\",\n    limit=5,\n    alpha=0.5,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\n# Print the results\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n\nMake sure your environment variables WCD_TEST_URL, WCD_TEST_KEY, and OPENAI_API_KEY are set before running the script.\n\nLet me know if you need help setting those or modifying the query further!",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Sure! Here's the complete Python code using the latest Weaviate client syntax to query the WineReview collection as per your requirements:\n        ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1
    },
    "extensive_examples_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:31:59.034716",
      "duration": 12.942564964294434,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Here's a complete Python script using the latest Weaviate Python client (v4.x) to perform a hybrid search on the WineReview collection, with the specified filters and connection settings:\n\nPython Code:\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, HybridFusion\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\ntry:\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Define the filter:\n    # price < 50 AND points > 90 AND review_body contains one of the keywords\n    keyword_filter = (\n        Filter.by_property(\"review_body\").like(\"*spice*\") |\n        Filter.by_property(\"review_body\").like(\"*fruit*\") |\n        Filter.by_property(\"review_body\").like(\"*berry*\") |\n        Filter.by_property(\"review_body\").like(\"*cherry*\") |\n        Filter.by_property(\"review_body\").like(\"*honey*\")\n    )\n\n    combined_filter = (\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        keyword_filter\n    )\n\n    # Perform hybrid search\n    response = collection.query.hybrid(\n        query=\"pair with steak\",\n        alpha=0.5,\n        fusion_type=HybridFusion.RELATIVE_SCORE,\n        filters=combined_filter,\n        return_properties=[\"title\", \"country\", \"price\", \"points\"],\n        limit=5\n    )\n\n    # Print results\n    for obj in response.objects:\n        props = obj.properties\n        print(f\"Title: {props.get('title')}\")\n        print(f\"Country: {props.get('country')}\")\n        print(f\"Price: {props.get('price')}\")\n        print(f\"Points: {props.get('points')}\")\n        print(\"-\" * 40)\n\nfinally:\n    client.close()\n\nWhat this code does:\n\n- Connects to your Weaviate Cloud instance using credentials from environment variables.\n- Queries the WineReview collection using a hybrid search with alpha=0.5 for the query \"pair with steak\".\n- Applies filters:\n  - price < 50\n  - points > 90\n  - review_body contains at least one of the keywords: spice, fruit, berry, cherry, honey\n- Limits results to 5.\n- Prints the title, country, price, and points of each result.\n\nMake sure the WineReview collection exists and has the appropriate schema and data.",
      "stdout": "",
      "stderr": "  File \"/code/code.py\", line 1\n    Here's a complete Python script using the latest Weaviate Python client (v4.x) to perform a hybrid search on the WineReview collection, with the specified filters and connection settings:\n                                                                                                                                                                                               ^\nSyntaxError: EOL while scanning string literal\n",
      "exit_code": 1
    }
  },
  "openai/gpt-4.1-2025-04-14": {
    "zero_shot_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:32:04.998600",
      "duration": 5.947791814804077,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "Certainly! Here is Python code using the latest Weaviate client (weaviate-client >=4.4.0) syntax as of June 2024. This code connects to Weaviate Cloud using the environment variables WCD_TEST_URL and WCD_TEST_KEY, and checks if the server is ready:\n\n```python\nimport os\nimport weaviate\n\n# Get credentials from environment variables\nurl = os.environ[\"WCD_TEST_URL\"]\napi_key = os.environ[\"WCD_TEST_KEY\"]\n\n# Create a Weaviate client for Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=url,\n    auth_credentials=weaviate.auth.AuthApiKey(api_key),\n)\n\n# Check if the server is ready\nif client.is_ready():\n    print(\"Weaviate server is ready to accept requests.\")\nelse:\n    print(\"Weaviate server is NOT ready.\")\n\n# Close the client connection\nclient.close()\n```\n\n**Notes:**\n- This uses the new connect_to_wcs and AuthApiKey syntax.\n- Make sure you have weaviate-client >=4.4.0 installed.\n- The code only connects and checks readiness, as requested.",
      "stdout": "Weaviate server is ready to accept requests.\n",
      "stderr": "",
      "exit_code": 0
    },
    "simple_example_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:32:11.106079",
      "duration": 6.099350929260254,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "Certainly! Here is the Python code using the latest Weaviate client syntax, reading the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`, connecting to Weaviate Cloud, checking readiness, and then closing the connection:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Read environment variables\ncluster_url = os.environ[\"WCD_TEST_URL\"]\napi_key = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Check if the server is ready\nassert client.is_ready()\n\nclient.close()\n```\n\n**Notes:**\n- This code assumes you have set the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`.\n- It uses the latest Weaviate client syntax as of 2024.\n- No other actions are performed except connecting, checking readiness, and closing.",
      "stdout": "",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:32:25.224746",
      "duration": 14.109925031661987,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "Certainly! Below is Python code using the **latest Weaviate client syntax** (as of June 2024, using `weaviate-client` v4.x) to:\n\n- Connect to Weaviate Cloud using environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`\n- Delete the \"DemoProducts\" collection if it exists\n- Create the \"DemoProducts\" collection with the specified properties\n\n```python\nimport os\nimport weaviate\nfrom weaviate.collections.classes.config import Property, DataType\n\n# Get environment variables\nWEAVIATE_URL = os.environ[\"WCD_TEST_URL\"]\nWEAVIATE_API_KEY = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=WEAVIATE_URL,\n    auth_credentials=weaviate.auth.AuthApiKey(WEAVIATE_API_KEY),\n)\n\ncollection_name = \"DemoProducts\"\n\n# Delete collection if it exists\nif collection_name in client.collections.list_all():\n    client.collections.delete(collection_name)\n\n# Define properties\nproperties = [\n    Property(name=\"name\", data_type=DataType.TEXT),\n    Property(name=\"description\", data_type=DataType.TEXT),\n    Property(name=\"price\", data_type=DataType.NUMBER),\n    Property(name=\"in_stock\", data_type=DataType.BOOL),\n]\n\n# Create the collection\nclient.collections.create(\n    name=collection_name,\n    properties=properties,\n)\n\nprint(f\"Collection '{collection_name}' created successfully.\")\n\n# Optional: Close the client connection\nclient.close()\n```\n\n**Notes:**\n- Make sure you have `weaviate-client` v4.x installed:  \n  ```\n  pip install --upgrade weaviate-client\n  ```\n- The code uses the new `collections` API and property types.\n- If you get an error about missing modules, ensure your client is up to date.\n\nLet me know if you need an example for inserting data!",
      "stdout": "Collection 'DemoProducts' created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "simple_example_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:32:35.358831",
      "duration": 10.125843048095703,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "Certainly! Here is the **complete Python code** using the latest Weaviate client syntax (as of June 2024), following your requirements and using the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Get credentials from environment variables\nCLUSTER_URL = os.environ[\"WCD_TEST_URL\"]\nAPI_KEY = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=CLUSTER_URL,\n    auth_credentials=Auth.api_key(API_KEY)\n)\n\n# Collection name\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\n# Create the collection with the specified properties\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close the connection\nclient.close()\n```\n\n**Notes:**\n- Make sure you have the latest `weaviate-client` installed (`pip install weaviate-client --upgrade`).\n- Ensure your environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set before running the script.\n- This code will **delete** the collection if it already exists, then create it anew with the specified schema.",
      "stdout": "Created collection: DemoProducts\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "extensive_examples_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:32:47.203656",
      "duration": 11.833452939987183,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Certainly! Here is Python code using the latest Weaviate Python client (v4.x) syntax to:\n\n- Connect to Weaviate Cloud using `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables.\n- Delete the \"DemoProducts\" collection if it exists.\n- Create the \"DemoProducts\" collection with the specified properties.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\ntry:\n    # Delete the collection if it exists\n    if client.collections.exists(\"DemoProducts\"):\n        client.collections.delete(\"DemoProducts\")\n\n    # Create the collection with the specified properties\n    client.collections.create(\n        \"DemoProducts\",\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT),\n            Property(name=\"price\", data_type=DataType.NUMBER),\n            Property(name=\"in_stock\", data_type=DataType.BOOL),\n        ]\n    )\nfinally:\n    client.close()\n```\n\n**Notes:**\n- This code uses the latest v4.x Weaviate Python client syntax.\n- The collection is created with no vectorizer (no semantic search) by default. If you want semantic search, add a `vectorizer_config` (see code examples above).\n- Make sure the environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set in your environment before running this code.",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "zero_shot_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:32:59.514383",
      "duration": 11.769353866577148,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "Certainly! Here\u2019s a complete Python script using the **latest Weaviate client syntax** (as of v4.x, released 2024) to:\n\n- Connect to Weaviate Cloud using environment variables.\n- Create a collection named `DemoProducts` with `name` and `description` properties.\n- Batch import 50 objects.\n- Print the number of objects in the collection.\n\n**Requirements:**  \n- `weaviate-client` version 4.x (`pip install weaviate-client>=4.0.0`)\n- `python-dotenv` if you want to load env vars from a `.env` file (optional).\n\n---\n\n```python\nimport os\nimport weaviate\nfrom weaviate.collections.classes.config import Property, DataType\n\n# Get credentials from environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=weaviate.auth.AuthApiKey(WCD_TEST_KEY),\n)\n\n# Define collection schema\ncollection_name = \"DemoProducts\"\nproperties = [\n    Property(name=\"name\", data_type=DataType.TEXT),\n    Property(name=\"description\", data_type=DataType.TEXT),\n]\n\n# Create collection if it doesn't exist\nif collection_name not in client.collections.list_all():\n    client.collections.create(\n        name=collection_name,\n        properties=properties,\n        vectorizer_config=weaviate.collections.classes.config.Configure.Vectorizer.text2vec_openai(),  # or your preferred vectorizer\n    )\n\n# Get collection handle\ncollection = client.collections.get(collection_name)\n\n# Prepare 50 objects\nobjects = [\n    {\n        \"name\": f\"Product {i}\",\n        \"description\": f\"Description {i}\"\n    }\n    for i in range(1, 51)\n]\n\n# Batch import\ncollection.data.insert_many(objects)\n\n# Count objects in the collection\ncount = collection.aggregate.count()\nprint(f\"Number of objects in '{collection_name}': {count}\")\n\n# Close connection\nclient.close()\n```\n\n---\n\n**Notes:**\n- This uses the new `collections` API (v4+).\n- Adjust the vectorizer if needed for your Weaviate instance.\n- Make sure your environment variables are set before running.\n- If you want to use `.env`, add `from dotenv import load_dotenv; load_dotenv()` at the top.\n\nLet me know if you need a requirements.txt or further explanation!",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 46, in <module>\n    count = collection.aggregate.count()\nAttributeError: '_AggregateCollection' object has no attribute 'count'\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n  warnings.warn(\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 1
    },
    "simple_example_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:33:16.699197",
      "duration": 16.655225038528442,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "Certainly! Here is a complete Python script using the latest [Weaviate Python client](https://weaviate.io/developers/weaviate/client-libraries/python) syntax (as of June 2024) to:\n\n- Connect to Weaviate Cloud using environment variables `WCD_TEST_URL` and `WCD_TEST_KEY`\n- Ensure the collection `DemoProducts` exists with the correct schema\n- Batch import 50 objects with `name` and `description` properties\n- Print the number of objects in the collection\n\n```python\nimport os\nimport weaviate\nfrom weaviate.auth import Auth\n\n# Get credentials from environment variables\nCLUSTER_URL = os.environ[\"WCD_TEST_URL\"]\nAPI_KEY = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=CLUSTER_URL,\n    auth_credentials=Auth.api_key(API_KEY),\n)\n\n# Ensure the collection exists with the correct schema\nCOLLECTION_NAME = \"DemoProducts\"\nif COLLECTION_NAME not in client.collections.list_all():\n    client.collections.create(\n        name=COLLECTION_NAME,\n        properties=[\n            weaviate.Property(name=\"name\", data_type=weaviate.DataType.TEXT),\n            weaviate.Property(name=\"description\", data_type=weaviate.DataType.TEXT),\n        ],\n    )\n\ncollection = client.collections.get(COLLECTION_NAME)\n\n# Prepare 50 objects\ndata_rows = [\n    {\"name\": f\"Product {i+1}\", \"description\": f\"Description {i+1}\"}\n    for i in range(50)\n]\n\n# Batch import\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(properties=data_row)\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\n# Print the number of objects in the collection\nprint(len(collection))\n\nclient.close()\n```\n\n**Notes:**\n- Make sure you have the latest `weaviate-client` installed:  \n  `pip install --upgrade weaviate-client`\n- This script will create the collection if it doesn't exist, otherwise it will use the existing one.\n- The script prints the number of objects in the collection after import.\n\nLet me know if you need a version for an older client or with additional features!",
      "stdout": "50\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:33:31.041399",
      "duration": 13.791682958602905,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Certainly! Here is a complete Python script using the **latest Weaviate Python client (v4.x)** syntax, following your requirements:\n\n- Connects to Weaviate Cloud using `WCD_TEST_URL` and `WCD_TEST_KEY` from environment variables.\n- Ensures a collection named `\"DemoProducts\"` exists with `name` and `description` (both text).\n- Batch imports 50 objects with those properties.\n- Prints the number of objects in the collection.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType, Configure\n\n# 1. Connect to Weaviate Cloud using environment variables\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"])\n)\n\ntry:\n    # 2. Ensure the \"DemoProducts\" collection exists with the correct schema\n    collection_name = \"DemoProducts\"\n    if not client.collections.exists(collection_name):\n        client.collections.create(\n            collection_name,\n            properties=[\n                Property(name=\"name\", data_type=DataType.TEXT),\n                Property(name=\"description\", data_type=DataType.TEXT),\n            ],\n            vectorizer_config=Configure.Vectorizer.text2vec_openai()  # or .none() if you don't want vectorization\n        )\n\n    # 3. Get the collection object\n    collection = client.collections.get(collection_name)\n\n    # 4. Batch import 50 objects\n    with collection.batch.dynamic() as batch:\n        for i in range(50):\n            batch.add_object(\n                properties={\n                    \"name\": f\"Product {i}\",\n                    \"description\": f\"Description {i}\"\n                }\n            )\n\n    # 5. Print the number of objects in the collection\n    count = collection.aggregate.count()\n    print(f\"Number of objects in '{collection_name}': {count}\")\n\nfinally:\n    client.close()\n```\n\n**Notes:**\n- This script will create the collection if it doesn't exist, but will not delete or modify it if it already exists.\n- The batch import uses the dynamic batcher for best performance.\n- The count is retrieved using the [aggregate.count()](https://weaviate.io/developers/weaviate/client-libraries/python#count-objects-in-a-collection) method.\n- Make sure your environment variables `WCD_TEST_URL` and `WCD_TEST_KEY` are set.\n\nLet me know if you need a version that always recreates the collection, or if you want to use a different vectorizer!",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 39, in <module>\n    count = collection.aggregate.count()\nAttributeError: '_AggregateCollection' object has no attribute 'count'\n",
      "exit_code": 1
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:33:43.103661",
      "duration": 11.782476902008057,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Certainly! Here\u2019s Python code using the **latest Weaviate client syntax** (as of mid-2024), leveraging the new `weaviate.connect_to_wcs` and `.query` APIs. This code:\n\n- Connects to Weaviate Cloud using environment variables.\n- Uses the `text2vec-openai` vectorizer (so we use `nearText`).\n- Queries the `WineReview` collection for the best matches to \"dessert wine\".\n- Limits results to 2.\n- Prints the `title`, `country`, `price`, and `points` fields.\n\n```python\nimport os\nimport weaviate\n\n# Get credentials from environment\nweaviate_url = os.environ[\"WCD_TEST_URL\"]\nweaviate_api_key = os.environ[\"WCD_TEST_KEY\"]\nopenai_api_key = os.environ[\"OPENAI_API_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    cluster_url=weaviate_url,\n    auth_credentials=weaviate.auth.AuthApiKey(weaviate_api_key),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key\n    }\n)\n\n# Query the WineReview collection\nresponse = client.collections.get(\"WineReview\").query.near_text(\n    query=\"dessert wine\"\n).limit(2).fetch(\n    properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print results\nfor obj in response.objects:\n    print(\"Title:\", obj.properties.get(\"title\"))\n    print(\"Country:\", obj.properties.get(\"country\"))\n    print(\"Price:\", obj.properties.get(\"price\"))\n    print(\"Points:\", obj.properties.get(\"points\"))\n    print(\"-\" * 40)\n\n# Close the client connection\nclient.close()\n```\n\n**Notes:**\n- Make sure you have the latest `weaviate-client` installed:  \n  `pip install --upgrade weaviate-client`\n- This code assumes the new `client.collections.get(...).query.near_text(...).limit(...).fetch(...)` syntax, which is current as of 2024.\n- If your Weaviate instance uses a different property naming convention, adjust the property names accordingly.\n- The `X-OpenAI-Api-Key` header is required for the `text2vec-openai` vectorizer.\n\nLet me know if you need a version for the legacy client or have any issues!",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.connect_to_wcs(\nTypeError: connect_to_wcs() got an unexpected keyword argument 'additional_headers'\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:33:55.670519",
      "duration": 12.202701807022095,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "Certainly! Here is the complete Python code using the latest Weaviate client syntax, as of June 2024, to query the **WineReview** collection for wines matching \"dessert wine\", with a limit of 2 results. It prints the **title**, **country**, **price**, and **points** for each result.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Load environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Query for wines matching \"dessert wine\"\nresponse = collection.query.near_text(\n    query=\"dessert wine\",\n    limit=2\n)\n\n# Print the desired properties for each result\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\nclient.close()\n```\n\n**Notes:**\n- Make sure your environment variables (`WCD_TEST_URL`, `WCD_TEST_KEY`, `OPENAI_API_KEY`) are set.\n- Adjust property names (`title`, `country`, `price`, `points`) if your schema uses different names.\n- This code uses the latest Weaviate Python client syntax as of June 2024.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:34:10.806146",
      "duration": 14.848308086395264,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Certainly! Here is Python code using the latest Weaviate Python client (v4.x) syntax to connect to your Weaviate Cloud instance, query the `WineReview` collection for the best matches to \"dessert wine\" (using the `near_text` semantic search), and print the `title`, `country`, `price`, and `points` for up to 2 results.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to Weaviate Cloud with OpenAI vectorizer key\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\ntry:\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Perform a semantic search for \"dessert wine\"\n    response = collection.query.near_text(\n        query=\"dessert wine\",\n        limit=2,\n        return_properties=[\"title\", \"country\", \"price\", \"points\"]\n    )\n\n    # Print the results\n    for obj in response.objects:\n        props = obj.properties\n        print(f\"Title: {props.get('title')}\")\n        print(f\"Country: {props.get('country')}\")\n        print(f\"Price: {props.get('price')}\")\n        print(f\"Points: {props.get('points')}\")\n        print(\"-\" * 40)\nfinally:\n    client.close()\n```\n\n**Notes:**\n- Make sure your environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY` are set.\n- This code uses the latest v4.x client syntax (`collection.query.near_text`).\n- Adjust property names if your schema uses different ones.\n- The connection is closed at the end for good practice.\n\nLet me know if you need this as a function or with error handling!",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:34:24.530259",
      "duration": 13.415633201599121,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "Certainly! Below is Python code using the latest [Weaviate Python client](https://weaviate.io/developers/weaviate/client-libraries/python) (v4.x syntax as of 2024-06) to perform your described query.\n\n**Assumptions:**\n- The `WineReview` collection has properties: `title`, `country`, `price`, `points`, `review_body`.\n- The environment variables are set as described.\n\n```python\nimport os\nimport weaviate\nfrom weaviate.connect import ConnectionParams\nfrom weaviate.collections.query import Filter, FilterOperator\n\n# Load environment variables\nweaviate_url = os.environ[\"WCD_TEST_URL\"]\nweaviate_api_key = os.environ[\"WCD_TEST_KEY\"]\nopenai_api_key = os.environ[\"OPENAI_API_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_wcs(\n    ConnectionParams.from_url(\n        url=weaviate_url,\n        api_key=weaviate_api_key,\n    ),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": openai_api_key\n    }\n)\n\n# Build the filter for price, points, and review_body substrings\nprice_filter = Filter.by_property(\"price\").less_than(50)\npoints_filter = Filter.by_property(\"points\").greater_than(90)\nreview_body_filter = (\n    Filter.by_property(\"review_body\").contains(\"spice\") |\n    Filter.by_property(\"review_body\").contains(\"fruit\") |\n    Filter.by_property(\"review_body\").contains(\"berry\") |\n    Filter.by_property(\"review_body\").contains(\"cherry\") |\n    Filter.by_property(\"review_body\").contains(\"honey\")\n)\ncombined_filter = price_filter & points_filter & review_body_filter\n\n# Query the WineReview collection\nresults = client.collections.get(\"WineReview\").query.hybrid(\n    query=\"pair with steak\",\n    alpha=0.5,\n    limit=5,\n    filters=combined_filter,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print results\nfor obj in results.objects:\n    props = obj.properties\n    print(f\"Title: {props['title']}\")\n    print(f\"Country: {props['country']}\")\n    print(f\"Price: {props['price']}\")\n    print(f\"Points: {props['points']}\")\n    print(\"-\" * 40)\n```\n\n**Notes:**\n- This uses the new `weaviate.connect_to_wcs` and `collections` API (v4+).\n- The filter uses `.contains()` for substring matching in `review_body`.\n- The hybrid search uses `alpha=0.5` as requested.\n- The OpenAI API key is passed as an additional header for the vectorizer.\n\n**Install the latest client if needed:**\n```bash\npip install --upgrade weaviate-client\n```\n\nLet me know if you need this adapted for older client versions or have different property names!",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 4, in <module>\n    from weaviate.collections.query import Filter, FilterOperator\nImportError: cannot import name 'Filter' from 'weaviate.collections.query' (/usr/local/lib/python3.9/site-packages/weaviate/collections/query.py)\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:34:34.632922",
      "duration": 9.83798098564148,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "Certainly! Here is the complete Python code using the latest Weaviate client syntax, as per your requirements:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\n\n# Load environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Build the filter\nreview_keywords = [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\nfilters = (\n    Filter.by_property(\"price\").less_than(50) &\n    Filter.by_property(\"points\").greater_than(90) &\n    Filter.by_property(\"review_body\").contains_any(review_keywords)\n)\n\n# Perform the hybrid search\nresponse = collection.query.hybrid(\n    query=\"pair with steak\",\n    limit=5,\n    alpha=0.5,\n    filters=filters,\n    return_metadata=MetadataQuery(score=True),\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print results\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(\"-\" * 40)\n\nclient.close()\n```\n\n**Notes:**\n- This code assumes the `WineReview` collection has the properties: `title`, `country`, `price`, `points`, and `review_body`.\n- The filter ensures price < 50, points > 90, and at least one of the specified substrings in `review_body`.\n- The hybrid search uses `alpha=0.5` and a limit of 5.\n- The OpenAI API key is passed in the header for the text2vec-openai vectorizer.\n- Results are printed with the required fields.\n\nLet me know if you need further customization!",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir\nCountry: US\nPrice: 40.0\nPoints: 92\nScore: 0.5\n----------------------------------------\nTitle: Bink 2014 Pinot Noir (Anderson Valley)\nCountry: US\nPrice: 49.0\nPoints: 91\nScore: 0.46158072352409363\n----------------------------------------\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza)\nCountry: Argentina\nPrice: 27.0\nPoints: 91\nScore: 0.21982641518115997\n----------------------------------------\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji)\nCountry: Hungary\nPrice: 25.0\nPoints: 93\nScore: 0.06552334129810333\n----------------------------------------\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux\nCountry: France\nPrice: 0.0\nPoints: 94\nScore: 0.01862688735127449\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:34:47.278384",
      "duration": 12.359109878540039,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "Certainly! Here is a complete Python script using the latest Weaviate Python client (v4.x) syntax, following your requirements:\n\n```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, HybridFusion\n\n# Connect to Weaviate Cloud with OpenAI key for vectorization\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\ntry:\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Build the filter:\n    # price < 50 AND points > 90 AND\n    # (review_body LIKE \"*spice*\" OR \"*fruit*\" OR \"*berry*\" OR \"*cherry*\" OR \"*honey*\")\n    review_body_filter = (\n        Filter.by_property(\"review_body\").like(\"*spice*\") |\n        Filter.by_property(\"review_body\").like(\"*fruit*\") |\n        Filter.by_property(\"review_body\").like(\"*berry*\") |\n        Filter.by_property(\"review_body\").like(\"*cherry*\") |\n        Filter.by_property(\"review_body\").like(\"*honey*\")\n    )\n    filters = (\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        review_body_filter\n    )\n\n    # Perform hybrid search\n    response = collection.query.hybrid(\n        query=\"pair with steak\",\n        alpha=0.5,\n        fusion_type=HybridFusion.RELATIVE_SCORE,\n        filters=filters,\n        limit=5,\n        return_properties=[\"title\", \"country\", \"price\", \"points\"]\n    )\n\n    # Print results\n    for obj in response.objects:\n        props = obj.properties\n        print(f\"Title: {props.get('title')}\")\n        print(f\"Country: {props.get('country')}\")\n        print(f\"Price: {props.get('price')}\")\n        print(f\"Points: {props.get('points')}\")\n        print(\"-\" * 40)\n\nfinally:\n    client.close()\n```\n\n**Notes:**\n- This script assumes the `WineReview` collection has the properties: `title`, `country`, `price`, `points`, and `review_body`.\n- The filter uses `.like(\"*substring*\")` for substring matching (case-insensitive).\n- The script prints the required fields for each matching wine.\n- Make sure your environment variables `WCD_TEST_URL`, `WCD_TEST_KEY`, and `OPENAI_API_KEY` are set.\n\n**References:**\n- [Weaviate Python Client Docs](https://weaviate.io/developers/weaviate/client-libraries/python)\n- [Weaviate Search Filters](https://weaviate.io/developers/weaviate/search/filters)\n\nLet me know if you need this as a function or with error handling!",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir\nCountry: US\nPrice: 40.0\nPoints: 92\n----------------------------------------\nTitle: Bink 2014 Pinot Noir (Anderson Valley)\nCountry: US\nPrice: 49.0\nPoints: 91\n----------------------------------------\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza)\nCountry: Argentina\nPrice: 27.0\nPoints: 91\n----------------------------------------\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji)\nCountry: Hungary\nPrice: 25.0\nPoints: 93\n----------------------------------------\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux\nCountry: France\nPrice: 0.0\nPoints: 94\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    }
  },
  "openai/gpt-4.1-mini-2025-04-14": {
    "zero_shot_connect": {
      "success": false,
      "timestamp": "2025-04-15T15:34:50.226847",
      "duration": 2.9342849254608154,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n",
      "generated_text": "```python\nimport os\nimport weaviate\n\n# Get environment variables\nurl = os.getenv(\"WCD_TEST_URL\")\napi_key = os.getenv(\"WCD_TEST_KEY\")\n\n# Create Weaviate client with API key authentication\nclient = weaviate.Client(\n    url=url,\n    auth_client_secret=weaviate.AuthApiKey(api_key),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": api_key  # sometimes needed, but usually not for WCD\n    }\n)\n\n# Check if the server is ready\nif client.is_ready():\n    print(\"Weaviate server is ready to accept requests.\")\nelse:\n    print(\"Weaviate server is not ready.\")\n```\n",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:9: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 9, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_connect": {
      "success": true,
      "timestamp": "2025-04-15T15:34:52.687100",
      "duration": 2.451443910598755,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto connect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen check that the server is ready to accept requests.\nDon't do anything else.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\nassert client.is_ready()\n\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\n# Read environment variables\ncluster_url = os.environ[\"WCD_TEST_URL\"]\napi_key = os.environ[\"WCD_TEST_KEY\"]\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=cluster_url,\n    auth_credentials=Auth.api_key(api_key)\n)\n\n# Check if the server is ready\nassert client.is_ready()\n\nclient.close()\n```",
      "stdout": "",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_create_collection": {
      "success": false,
      "timestamp": "2025-04-15T15:34:57.832310",
      "duration": 5.1331541538238525,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n",
      "generated_text": "```python\nimport os\nimport weaviate\n\n# Load environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set\")\n\n# Create Weaviate client with API key authentication\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": WCD_TEST_KEY  # sometimes needed for OpenAI modules, remove if not needed\n    }\n)\n\nclass_name = \"DemoProducts\"\n\n# Delete class if it exists\nif client.schema.contains(class_name):\n    client.schema.delete_class(class_name)\n\n# Define the schema for the class\ndemo_products_class = {\n    \"class\": class_name,\n    \"description\": \"A collection of demo products\",\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n            \"description\": \"Name of the product\"\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n            \"description\": \"Description of the product\"\n        },\n        {\n            \"name\": \"price\",\n            \"dataType\": [\"number\"],\n            \"description\": \"Price of the product\"\n        },\n        {\n            \"name\": \"in_stock\",\n            \"dataType\": [\"boolean\"],\n            \"description\": \"Whether the product is in stock\"\n        }\n    ]\n}\n\n# Create the class\nclient.schema.create_class(demo_products_class)\n\nprint(f\"Class '{class_name}' created successfully.\")\n```\n",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:12: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 12, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:35:02.813814",
      "duration": 4.973218202590942,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>)\n)\n\n# Create the collection\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists (for testing purposes)\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\n# Read environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set\")\n\n# Connect to the Weaviate Cloud instance\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY)\n)\n\ncollection_name = \"DemoProducts\"\n\n# Delete the collection if it already exists\nif client.collections.exists(collection_name):\n    client.collections.delete(collection_name)\n\n# Create the collection with the specified properties\nproducts_collection = client.collections.create(\n    collection_name,\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"description\", data_type=DataType.TEXT),\n        Property(name=\"price\", data_type=DataType.NUMBER),\n        Property(name=\"in_stock\", data_type=DataType.BOOL),\n    ]\n)\n\nprint(f\"Created collection: {products_collection.name}\")\n\n# Close connection\nclient.close()\n```",
      "stdout": "Created collection: DemoProducts\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "extensive_examples_create_collection": {
      "success": true,
      "timestamp": "2025-04-15T15:35:08.199825",
      "duration": 5.3759589195251465,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto create a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n- price (number property)\n- in_stock (boolean property)\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nIf the collection already exists, delete it first.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Property, DataType\n\ndef main():\n    # Read environment variables\n    wcd_url = os.environ[\"WCD_TEST_URL\"]\n    wcd_key = os.environ[\"WCD_TEST_KEY\"]\n\n    # Connect to Weaviate Cloud\n    client = weaviate.connect_to_weaviate_cloud(\n        cluster_url=wcd_url,\n        auth_credentials=Auth.api_key(wcd_key)\n    )\n\n    collection_name = \"DemoProducts\"\n\n    # If collection exists, delete it first\n    if client.collections.exists(collection_name):\n        client.collections.delete(collection_name)\n\n    # Create collection with specified properties\n    client.collections.create(\n        collection_name,\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT),\n            Property(name=\"price\", data_type=DataType.NUMBER),\n            Property(name=\"in_stock\", data_type=DataType.BOOL),\n        ]\n    )\n\n    print(f'Collection \"{collection_name}\" created successfully.')\n\n    # Close client connection when done\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n",
      "stdout": "Collection \"DemoProducts\" created successfully.\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n",
      "exit_code": 0
    },
    "zero_shot_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:35:15.999445",
      "duration": 7.291723966598511,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n",
      "generated_text": "```python\nimport os\nimport weaviate\n\n# Get environment variables\nWCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\nWCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\nif not WCD_TEST_URL or not WCD_TEST_KEY:\n    raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set\")\n\n# Connect to Weaviate Cloud\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": WCD_TEST_KEY  # sometimes needed for OpenAI integration, but optional here\n    }\n)\n\n# Define the schema for the \"DemoProducts\" class\nschema = {\n    \"class\": \"DemoProducts\",\n    \"description\": \"A collection of demo products\",\n    \"properties\": [\n        {\n            \"name\": \"name\",\n            \"dataType\": [\"text\"],\n            \"description\": \"Name of the product\"\n        },\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n            \"description\": \"Description of the product\"\n        }\n    ]\n}\n\n# Check if class exists, if not create it\nif \"DemoProducts\" not in [c[\"class\"] for c in client.schema.get()[\"classes\"]]:\n    client.schema.create_class(schema)\n\n# Prepare batch import of 50 objects\nwith client.batch as batch:\n    batch.batch_size = 20  # optional, default is 100\n    for i in range(1, 51):\n        obj = {\n            \"name\": f\"Product {i}\",\n            \"description\": f\"Description {i}\"\n        }\n        batch.add_data_object(obj, \"DemoProducts\")\n\n# Query to count the number of objects in DemoProducts\nresult = client.query.aggregate(\"DemoProducts\").with_meta_count().do()\n\ncount = 0\ntry:\n    count = result[\"data\"][\"Aggregate\"][\"DemoProducts\"][0][\"meta\"][\"count\"]\nexcept (KeyError, IndexError):\n    pass\n\nprint(f\"Number of objects in 'DemoProducts': {count}\")\n```\n",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:12: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 12, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_batch_import": {
      "success": false,
      "timestamp": "2025-04-15T15:35:23.676718",
      "duration": 7.1577911376953125,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\nimport weaviate\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\ndata_rows = [\n    {\"title\": f\"Object {i+1}\"} for i in range(5)\n]\n\nwith collection.batch.dynamic() as batch:\n    for data_row in data_rows:\n        batch.add_object(\n            properties=data_row,\n        )\n        if batch.number_errors > 10:\n            print(\"Batch import stopped due to excessive errors.\")\n            break\n\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed imports: {len(failed_objects)}\")\n    print(f\"First failed object: {failed_objects[0]}\")\n\nprint(len(collection))\n\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.auth import AuthApiKey\n\ndef main():\n    # Read environment variables\n    WCD_TEST_URL = os.getenv(\"WCD_TEST_URL\")\n    WCD_TEST_KEY = os.getenv(\"WCD_TEST_KEY\")\n\n    if not WCD_TEST_URL or not WCD_TEST_KEY:\n        raise ValueError(\"Environment variables WCD_TEST_URL and WCD_TEST_KEY must be set\")\n\n    # Connect to Weaviate Cloud\n    client = weaviate.connect_to_weaviate_cloud(\n        cluster_url=WCD_TEST_URL,\n        auth_credentials=AuthApiKey(api_key=WCD_TEST_KEY),\n    )\n\n    # Define the class schema for \"DemoProducts\" if it doesn't exist\n    class_name = \"DemoProducts\"\n    schema = client.schema.get()\n    classes = [c[\"class\"] for c in schema.get(\"classes\", [])]\n\n    if class_name not in classes:\n        class_obj = {\n            \"class\": class_name,\n            \"description\": \"A demo product class\",\n            \"properties\": [\n                {\n                    \"name\": \"name\",\n                    \"dataType\": [\"text\"],\n                    \"description\": \"Name of the product\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"dataType\": [\"text\"],\n                    \"description\": \"Description of the product\",\n                },\n            ],\n        }\n        client.schema.create_class(class_obj)\n\n    # Get the collection (class) reference\n    collection = client.collections.get(class_name)\n\n    # Prepare 50 arbitrary objects\n    data_rows = [\n        {\n            \"name\": f\"Product {i}\",\n            \"description\": f\"Description {i}\"\n        }\n        for i in range(1, 51)\n    ]\n\n    # Batch import objects\n    with collection.batch.dynamic() as batch:\n        for data_row in data_rows:\n            batch.add_object(properties=data_row)\n            if batch.number_errors > 10:\n                print(\"Batch import stopped due to excessive errors.\")\n                break\n\n    # Check for failed objects\n    failed_objects = collection.batch.failed_objects\n    if failed_objects:\n        print(f\"Number of failed imports: {len(failed_objects)}\")\n        print(f\"First failed object: {failed_objects[0]}\")\n\n    # Print the number of objects in the collection\n    print(f\"Number of objects in '{class_name}': {len(collection)}\")\n\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n",
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/code/code.py\", line 75, in <module>\n    main()\n  File \"/code/code.py\", line 21, in main\n    schema = client.schema.get()\nAttributeError: 'WeaviateClient' object has no attribute 'schema'\n/usr/local/lib/python3.9/site-packages/weaviate/warnings.py:314: ResourceWarning: Con004: The connection to Weaviate was not closed properly. This can lead to memory leaks.\n            Please make sure to close the connection using `client.close()`.\n  warnings.warn(\n/usr/local/lib/python3.9/asyncio/selector_events.py:702: ResourceWarning: unclosed transport <_SelectorSocketTransport fd=6 read=idle write=<idle, bufsize=0>>\n",
      "exit_code": 1
    },
    "extensive_examples_batch_import": {
      "success": true,
      "timestamp": "2025-04-15T15:35:34.699335",
      "duration": 10.47434115409851,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto add objects to a collection named \"DemoProducts\" with the following properties:\n- name (text property)\n- description (text property)\n\nThen, batch import 50 arbitrary objects into the collection.\nThe object can be as simple as:\n{\n    \"name\": \"Product {i}\",\n    \"description\": \"Description {i}\"\n}\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nThen, print the number of objects in the collection.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.config import Configure, Property, DataType\n\ndef main():\n    # Connect to Weaviate Cloud using environment variables\n    client = weaviate.connect_to_weaviate_cloud(\n        cluster_url=os.environ[\"WCD_TEST_URL\"],\n        auth_credentials=Auth.api_key(os.environ[\"WCD_TEST_KEY\"]),\n    )\n\n    collection_name = \"DemoProducts\"\n\n    # Check if collection exists, delete if it does (optional, to start fresh)\n    if client.collections.exists(collection_name):\n        client.collections.delete(collection_name)\n\n    # Create collection with properties: name and description (both TEXT)\n    client.collections.create(\n        collection_name,\n        properties=[\n            Property(name=\"name\", data_type=DataType.TEXT),\n            Property(name=\"description\", data_type=DataType.TEXT),\n        ],\n        # Use a vectorizer, e.g. text2vec-openai for text properties (optional but recommended)\n        vectorizer_config=Configure.Vectorizer.text2vec_openai()\n    )\n\n    # Get the collection object\n    collection = client.collections.get(collection_name)\n\n    # Batch import 50 arbitrary objects\n    with collection.batch.dynamic() as batch:\n        for i in range(50):\n            batch.add_object(\n                properties={\n                    \"name\": f\"Product {i}\",\n                    \"description\": f\"Description {i}\"\n                }\n            )\n\n    # Print the number of objects in the collection\n    # We can query all objects and count them\n    response = collection.query.fetch_objects(\n        limit=1000,  # large enough to get all 50 objects\n        return_properties=[\"name\"]\n    )\n    print(f\"Number of objects in '{collection_name}': {len(response.objects)}\")\n\n    # Close client connection\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n---\n\n### Explanation\n\n- Connects to Weaviate Cloud using `WCD_TEST_URL` and `WCD_TEST_KEY` environment variables.\n- Creates a collection named `\"DemoProducts\"` with two text properties: `name` and `description`.\n- Uses the `text2vec_openai` vectorizer for semantic search capabilities.\n- Batch imports 50 objects with simple properties.\n- Queries all objects in the collection and prints the count.\n- Closes the client connection at the end.\n\n---\n\n### Notes\n\n- If you want to keep existing data, remove the deletion step.\n- Adjust the batch size or vectorizer as needed.\n- For more info, see the official docs: https://weaviate.io/developers/weaviate/client-libraries/python",
      "stdout": "Number of objects in 'DemoProducts': 0\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/collections/classes/config.py:2041: PydanticDeprecatedSince211: Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.\n  for cls_field in self.model_fields:\n{'message': 'Failed to send all objects in a batch of 48', 'error': \"WeaviateInsertManyAllFailedError('Every object failed during insertion. Here is the set of all errors: API Key: no api key found neither in request header: X-Openai-Api-Key nor in environment variable under OPENAI_APIKEY')\"}\n{'message': 'Failed to send 48 objects in a batch of 48. Please inspect client.batch.failed_objects or collection.batch.failed_objects for the failed objects.'}\n{'message': 'Failed to send all objects in a batch of 2', 'error': \"WeaviateInsertManyAllFailedError('Every object failed during insertion. Here is the set of all errors: API Key: no api key found neither in request header: X-Openai-Api-Key nor in environment variable under OPENAI_APIKEY')\"}\n{'message': 'Failed to send 2 objects in a batch of 2. Please inspect client.batch.failed_objects or collection.batch.failed_objects for the failed objects.'}\n",
      "exit_code": 0
    },
    "zero_shot_basic_semantic_search": {
      "success": false,
      "timestamp": "2025-04-15T15:35:38.686849",
      "duration": 3.709623098373413,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "```python\nimport os\nimport weaviate\n\n# Load environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n# Initialize Weaviate client with authentication\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    auth_client_secret=weaviate.AuthApiKey(api_key=WCD_TEST_KEY),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": OPENAI_API_KEY\n    }\n)\n\n# Define the query string\nquery_text = \"dessert wine\"\n\n# Perform the vector search using the text2vec-openai vectorizer\nresult = (\n    client.query.get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"])\n    .with_near_text({\"concepts\": [query_text]})\n    .with_limit(2)\n    .do()\n)\n\n# Extract and print results\nwines = result.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", [])\nfor wine in wines:\n    title = wine.get(\"title\")\n    country = wine.get(\"country\")\n    price = wine.get(\"price\")\n    points = wine.get(\"points\")\n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n```",
      "stdout": "",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n/code/code.py:10: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:35:48.798187",
      "duration": 9.815463066101074,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.near_text(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\ndef main():\n    # Load environment variables\n    WCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\n    WCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\n    OPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n    # Connect to Weaviate Cloud\n    client = weaviate.connect_to_weaviate_cloud(\n        cluster_url=WCD_TEST_URL,\n        auth_credentials=Auth.api_key(WCD_TEST_KEY),\n        headers={\n            \"X-OpenAI-API-Key\": OPENAI_API_KEY\n        },\n    )\n\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Query for \"dessert wine\" with max 2 results\n    response = collection.query.near_text(\n        query=\"dessert wine\",\n        limit=2\n    )\n\n    # Print title, country, price, and points for each result\n    for obj in response.objects:\n        props = obj.properties\n        title = props.get(\"title\", \"N/A\")\n        country = props.get(\"country\", \"N/A\")\n        price = props.get(\"price\", \"N/A\")\n        points = props.get(\"points\", \"N/A\")\n        print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA)), Country: US, Price: 24.0, Points: 88\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast), Country: US, Price: 40.0, Points: 88\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_basic_semantic_search": {
      "success": true,
      "timestamp": "2025-04-15T15:35:56.230786",
      "duration": 7.128016948699951,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"dessert wine\",\nwith a limit of maximum 2 results.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\n\ndef main():\n    # Read environment variables\n    wcd_url = os.environ[\"WCD_TEST_URL\"]\n    wcd_api_key = os.environ[\"WCD_TEST_KEY\"]\n    openai_api_key = os.environ[\"OPENAI_API_KEY\"]\n\n    # Connect to Weaviate Cloud with OpenAI API key in headers for text2vec-openai vectorizer\n    client = weaviate.connect_to_weaviate_cloud(\n        cluster_url=wcd_url,\n        auth_credentials=Auth.api_key(wcd_api_key),\n        headers={\n            \"X-OpenAI-Api-Key\": openai_api_key\n        }\n    )\n\n    # Get the WineReview collection\n    collection = client.collections.get(\"WineReview\")\n\n    # Perform a semantic search using near_text with the query \"dessert wine\"\n    response = collection.query.near_text(\n        query=\"dessert wine\",\n        limit=2,\n        return_properties=[\"title\", \"country\", \"price\", \"points\"]\n    )\n\n    # Print the results\n    for obj in response.objects:\n        props = obj.properties\n        print(f\"Title: {props.get('title', 'N/A')}\")\n        print(f\"Country: {props.get('country', 'N/A')}\")\n        print(f\"Price: {props.get('price', 'N/A')}\")\n        print(f\"Points: {props.get('points', 'N/A')}\")\n        print(\"-\" * 40)\n\n    # Close the client connection\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code uses the latest Weaviate Python client syntax (v4.x) and follows the example patterns you provided. It connects to your Weaviate Cloud instance using environment variables, performs a semantic search on the `WineReview` collection with the `text2vec-openai` vectorizer, and prints the requested properties for up to 2 matching wines.",
      "stdout": "Title: Dynasty Cellars 2007 DC3 Meritage (Walla Walla Valley (WA))\nCountry: US\nPrice: 24.0\nPoints: 88\n----------------------------------------\nTitle: Clos La Chance 2008 Whitestone Vineyard Cabernet Sauvignon (Central Coast)\nCountry: US\nPrice: 40.0\nPoints: 88\n----------------------------------------\n",
      "stderr": "",
      "exit_code": 0
    },
    "zero_shot_complex_hybrid_query": {
      "success": false,
      "timestamp": "2025-04-15T15:36:05.259769",
      "duration": 8.743945121765137,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n",
      "generated_text": "```python\nimport os\nimport weaviate\n\n# Load environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n# Initialize Weaviate client with API key authentication\nclient = weaviate.Client(\n    url=WCD_TEST_URL,\n    additional_headers={\n        \"X-OpenAI-Api-Key\": OPENAI_API_KEY,\n        \"Authorization\": f\"Bearer {WCD_TEST_KEY}\"\n    }\n)\n\n# Define the query string\nquery_text = \"pair with steak\"\n\n# Define the filter for price < 50 and points > 90\nfilter_obj = {\n    \"operator\": \"And\",\n    \"operands\": [\n        {\n            \"path\": [\"price\"],\n            \"operator\": \"LessThan\",\n            \"valueInt\": 50\n        },\n        {\n            \"path\": [\"points\"],\n            \"operator\": \"GreaterThan\",\n            \"valueInt\": 90\n        }\n    ]\n}\n\n# Define the filter for review_body containing at least one of the substrings\n# We use a \"Or\" operator with \"Like\" operators for each substring\nreview_body_filter = {\n    \"operator\": \"Or\",\n    \"operands\": [\n        {\"path\": [\"review_body\"], \"operator\": \"Like\", \"valueString\": \"*spice*\"},\n        {\"path\": [\"review_body\"], \"operator\": \"Like\", \"valueString\": \"*fruit*\"},\n        {\"path\": [\"review_body\"], \"operator\": \"Like\", \"valueString\": \"*berry*\"},\n        {\"path\": [\"review_body\"], \"operator\": \"Like\", \"valueString\": \"*cherry*\"},\n        {\"path\": [\"review_body\"], \"operator\": \"Like\", \"valueString\": \"*honey*\"},\n    ]\n}\n\n# Combine the two filters with an \"And\"\ncombined_filter = {\n    \"operator\": \"And\",\n    \"operands\": [\n        filter_obj,\n        review_body_filter\n    ]\n}\n\n# Perform the hybrid query\nresult = (\n    client.query.get(\"WineReview\", [\"title\", \"country\", \"price\", \"points\"])\n    .with_hybrid(query_text, alpha=0.5)\n    .with_limit(5)\n    .with_where(combined_filter)\n    .do()\n)\n\n# Extract and print results\nfor wine in result.get(\"data\", {}).get(\"Get\", {}).get(\"WineReview\", []):\n    title = wine.get(\"title\")\n    country = wine.get(\"country\")\n    price = wine.get(\"price\")\n    points = wine.get(\"points\")\n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n```\n",
      "stdout": "",
      "stderr": "/code/code.py:10: DeprecationWarning: \nPython client v3 `weaviate.Client(...)` has been removed.\n\nUpgrade your code to use Python client v4 `weaviate.WeaviateClient` connections and methods.\n    - For Python Client v4 usage, see: https://weaviate.io/developers/weaviate/client-libraries/python\n    - For code migration, see: https://weaviate.io/developers/weaviate/client-libraries/python/v3_v4_migration\n\nIf you have to use v3 code, install the v3 client and pin the v3 dependency in your requirements file: `weaviate-client>=3.26.7;<4.0.0`\n  client = weaviate.Client(\nTraceback (most recent call last):\n  File \"/code/code.py\", line 10, in <module>\n    client = weaviate.Client(\nTypeError: __init__() got an unexpected keyword argument 'url'\n",
      "exit_code": 1
    },
    "simple_example_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:36:11.431781",
      "duration": 5.896470785140991,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\nimport os\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=<CLUSTER_URL>,\n    auth_credentials=Auth.api_key(<API_KEY>),\n    headers={\n        \"X-OpenAI-API-Key\": <OPENAI_API_KEY>\n    },\n)\n\ncollection = client.collections.get(\"<COLLECTION_NAME>\")\n\nresponse = collection.query.hybrid(\n    query=\"<YOUR_QUERY>\",\n    limit=<max_k_results>,\n    alpha=<alpha>,\n    filters=(\n        Filter.by_property(\"price\").less_than(50) &\n        Filter.by_property(\"points\").greater_than(90) &\n        Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n    ),\n    return_metadata=MetadataQuery(score=True)\n)\n\nfor obj in response.objects:\n    print(obj.properties)  # Print all properties of the object\n    print(f\"Score: {obj.metadata.score}\")\n\nclient.close()\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.init import Auth\nfrom weaviate.classes.query import Filter, MetadataQuery\n\n# Read environment variables\nWCD_TEST_URL = os.environ[\"WCD_TEST_URL\"]\nWCD_TEST_KEY = os.environ[\"WCD_TEST_KEY\"]\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=WCD_TEST_URL,\n    auth_credentials=Auth.api_key(WCD_TEST_KEY),\n    headers={\n        \"X-OpenAI-API-Key\": OPENAI_API_KEY\n    },\n)\n\n# Get the WineReview collection\ncollection = client.collections.get(\"WineReview\")\n\n# Build the filter:\n# price < 50 AND points > 90 AND review_body contains any of the substrings\nfilter_ = (\n    Filter.by_property(\"price\").less_than(50) &\n    Filter.by_property(\"points\").greater_than(90) &\n    Filter.by_property(\"review_body\").contains_any([\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"])\n)\n\n# Perform the hybrid query\nresponse = collection.query.hybrid(\n    query=\"pair with steak\",\n    limit=5,\n    alpha=0.5,\n    filters=filter_,\n    return_metadata=MetadataQuery(score=True)\n)\n\n# Print the requested fields for each matching wine\nfor obj in response.objects:\n    props = obj.properties\n    title = props.get(\"title\", \"<no title>\")\n    country = props.get(\"country\", \"<no country>\")\n    price = props.get(\"price\", \"<no price>\")\n    points = props.get(\"points\", \"<no points>\")\n    print(f\"Title: {title}, Country: {country}, Price: {price}, Points: {points}\")\n\nclient.close()\n```",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir, Country: US, Price: 40.0, Points: 92\nTitle: Bink 2014 Pinot Noir (Anderson Valley), Country: US, Price: 49.0, Points: 91\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza), Country: Argentina, Price: 27.0, Points: 91\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji), Country: Hungary, Price: 25.0, Points: 93\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux, Country: France, Price: 0.0, Points: 94\n",
      "stderr": "",
      "exit_code": 0
    },
    "extensive_examples_complex_hybrid_query": {
      "success": true,
      "timestamp": "2025-04-15T15:36:18.829682",
      "duration": 7.114341974258423,
      "prompt": "\nWrite Python code using the latest Weaviate client syntax,\nto query the 'WineReview' collection and find wines that\nbest match the query \"pair with steak\",\nwith a limit of maximum 5 results,\nand a hybrid search with alpha=0.5.\n\nEach result must be have a price less than 50 and a points greater than 90.\nEach result must contain at least one of the substrings \"spice\", \"fruit\", \"berry\", \"cherry\", or \"honey\" in the review_body.\n\nThe WineReview collection uses the text2vec-openai vectorizer.\nThe API key is stored in the environment variable OPENAI_API_KEY.\n\nConnect to Weaviate Cloud using the environment variables\nWCD_TEST_URL and WCD_TEST_KEY.\n(WCD_TEST_URL is the URL of the Weaviate Cloud instance,\nand WCD_TEST_KEY is the API key for the Weaviate Cloud instance.)\n\nPrint the title, country, price, and points of each matching wine.\n\n\nHere is some example code:\n\n\n# START_CODE_EXAMPLES\n\"\"\"\n===============================================\nEssential Weaviate Python Client Examples (v4.x)\n===============================================\n\nThis document contains key examples for using the Weaviate Python client (v4.x).\n\nThe page also includes comments that indicate to the user where they may find more information.\n\nIf the provided examples are not sufficient as in-context example for code generation,\nindicate to the user in comments where they may find more information.\n\"\"\"\n\n# ========================\n# 1. CLIENT INSTANTIATION\n# ========================\n# For more information, see the Python Client library page: https://www.weaviate.io/developers/weaviate/client-libraries/python\n\n\"\"\"\nConnecting to Weaviate instances (local, cloud, custom)\n\"\"\"\n\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport os\n\n# Connect to local instance\nclient = weaviate.connect_to_local()\n\n# Connect with API key authentication and headers\nclient = weaviate.connect_to_local(\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Connect to Weaviate Cloud\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WEAVIATE_URL\"],\n    auth_credentials=Auth.api_key(os.environ[\"WEAVIATE_API_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Custom connection (more control)\nclient = weaviate.connect_to_custom(\n    http_host=\"localhost\",\n    http_port=8080,\n    http_secure=False,\n    grpc_host=\"localhost\",\n    grpc_port=50051,\n    grpc_secure=False,\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Add inference API keys as needed\n    }\n)\n\n# Using context manager for automatic connection closing\nwith weaviate.connect_to_local() as client:\n    # Client operations go here...\n    pass  # Connection is closed automatically\n\n# Using try/finally for connection handling\nclient = weaviate.connect_to_local()\ntry:\n    # Client operations go here...\n    pass\nfinally:\n    client.close()  # Ensure connection is closed\n\n\n# =========================\n# 2. COLLECTION MANAGEMENT\n# =========================\n# For more information, see the How-to Manage Collections page: https://weaviate.io/developers/weaviate/manage-data/collections\n\n\"\"\"\nCreating, configuring, and managing collections\n\"\"\"\n\nfrom weaviate.classes.config import Configure, Property, DataType\n\n# Basic collection creation\nclient.collections.create(\"Article\")\n\n# Collection with properties\nclient.collections.create(\n    \"Article\",\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with vectorizer\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n        Property(name=\"categories\", data_type=DataType.TEXT_ARRAY),\n        Property(name=\"is_published\", data_type=DataType.BOOL),\n        Property(name=\"word_count\", data_type=DataType.INT),\n    ]\n)\n\n# Collection with named vectors\nclient.collections.create(\n    \"ArticleNV\",\n    vectorizer_config=[\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title\",\n            source_properties=[\"title\"]\n        ),\n        Configure.NamedVectors.text2vec_openai(\n            name=\"title_body\",\n            source_properties=[\"title\", \"body\"]\n        ),\n        # For user-provided vectors\n        Configure.NamedVectors.none(name=\"custom_vector\")\n    ],\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with generative module\nclient.collections.create(\n    \"Article\",\n    vectorizer_config=Configure.Vectorizer.text2vec_openai(),\n    generative_config=Configure.Generative.openai(\n        model=\"gpt-4\"  # Optional specific model\n    ),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ]\n)\n\n# Collection with references (cross-references)\nclient.collections.create(\n    \"Author\",\n    properties=[\n        Property(name=\"name\", data_type=DataType.TEXT),\n        Property(name=\"birthday\", data_type=DataType.DATE),\n        Property(name=\"height_m\", data_type=DataType.NUMBER),\n    ],\n    references=[\n        weaviate.classes.config.ReferenceProperty(\n            name=\"wroteArticle\",\n            target_collection=\"Article\"\n        )\n    ]\n)\n\n# Get a collection\ncollection = client.collections.get(\"Article\")\n\n# Check if collection exists\nexists = client.collections.exists(\"Article\")\n\n# List all collections\ncollections = client.collections.list_all()\n\n# Update a collection\nfrom weaviate.classes.config import Reconfigure\n\ncollection = client.collections.get(\"Article\")\ncollection.config.update(\n    inverted_index_config=Reconfigure.inverted_index(\n        bm25_k1=1.5\n    )\n)\n\n# Add a property to an existing collection\ncollection.config.add_property(\n    Property(name=\"publication_date\", data_type=DataType.DATE)\n)\n\n# Delete a collection\nclient.collections.delete(\"Article\")\n\n\n# ========================\n# 3. DATA OPERATIONS\n# ========================\n# For more information, see the How-to Manage Data pages: https://weaviate.io/developers/weaviate/manage-data\n\n\"\"\"\nCreating, updating, and retrieving objects\n\"\"\"\n\n# Insert a single object\ncollection = client.collections.get(\"Article\")\nuuid = collection.data.insert({\n    \"title\": \"My first article\",\n    \"body\": \"This is the body of my first article.\",\n})\n\n# Insert with a specific UUID\nfrom weaviate.util import generate_uuid5\n\nproperties = {\n    \"title\": \"My second article\",\n    \"body\": \"This is the body of my second article.\"\n}\nuuid = collection.data.insert(\n    properties=properties,\n    uuid=generate_uuid5(properties)  # Generate a deterministic ID\n)\n\n# Insert with a custom vector\ncollection.data.insert(\n    properties={\n        \"title\": \"Article with custom vector\",\n        \"body\": \"This article has a custom vector.\"\n    },\n    vector=[0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector values\n)\n\n# Insert with named vectors\ncollection = client.collections.get(\"ArticleNV\")\ncollection.data.insert(\n    properties={\n        \"title\": \"Named vector article\",\n        \"body\": \"This article uses named vectors.\"\n    },\n    vector={\n        \"title\": [0.1, 0.2, 0.3, 0.4, 0.5],  # Vector for title\n        \"title_body\": [0.5, 0.4, 0.3, 0.2, 0.1]  # Vector for title_body\n    }\n)\n\n# Fetch an object by ID\nobj = collection.query.fetch_object_by_id(uuid)\nprint(obj.properties)\n\n# Fetch objects with vectors\nobj = collection.query.fetch_object_by_id(uuid, include_vector=True)\nprint(obj.vector)  # Access the vector\n\n# Update an object\ncollection.data.update(\n    uuid=uuid,\n    properties={\n        \"title\": \"Updated title\"\n    }\n)\n\n# Replace an object (replaces all properties)\ncollection.data.replace(\n    uuid=uuid,\n    properties={\n        \"title\": \"Completely new title\",\n        \"body\": \"Completely new body\"\n    }\n)\n\n# Delete an object\ncollection.data.delete_by_id(uuid)\n\n# Working with references\narticle_uuid = collection.data.insert({\"title\": \"Referenced Article\"})\nauthor_collection = client.collections.get(\"Author\")\nauthor_uuid = author_collection.data.insert({\"name\": \"John Doe\"})\n\n# Add a reference\nauthor_collection.data.reference_add(\n    from_uuid=author_uuid,\n    from_property=\"wroteArticle\",\n    to=article_uuid\n)\n\n\n# ========================\n# 4. BATCH OPERATIONS\n# ========================\n# For more information, see the How-to batch import data page: https://weaviate.io/developers/weaviate/manage-data/import\n# And the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#batch-imports\n\n\"\"\"\nBatch import for better performance\n\"\"\"\n\n# Dynamic batch (adapts to Weaviate load)\ncollection = client.collections.get(\"Article\")\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Fixed size batch\nwith collection.batch.fixed_size(batch_size=50) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Rate limited batch\nwith collection.batch.rate_limit(requests_per_minute=600) as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n\n# Batch with error handling\nwith collection.batch.dynamic() as batch:\n    for i in range(100):\n        batch.add_object(\n            properties={\n                \"title\": f\"Article {i}\",\n                \"body\": f\"This is article {i}\"\n            }\n        )\n        if batch.number_errors > 10:\n            print(\"Too many errors, stopping batch\")\n            break\n\n# Get failed objects after batch completes\nfailed_objects = collection.batch.failed_objects\nif failed_objects:\n    print(f\"Number of failed objects: {len(failed_objects)}\")\n\n# Insert many items at once\nfrom weaviate.classes.data import DataObject\n\ndata_objects = [\n    DataObject(\n        properties={\"title\": f\"Article {i}\", \"body\": f\"Body {i}\"},\n        vector=[0.1] * 5  # Optional vector\n    )\n    for i in range(10)\n]\n\ncollection.data.insert_many(data_objects)\n\n\n# ========================\n# 5. SEARCH OPERATIONS\n# ========================\n# For more information, see the How-to search pages: https://weaviate.io/developers/weaviate/search\n\n\"\"\"\nVarious search methods (semantic, keyword, hybrid)\n\"\"\"\n\n# Basic search (fetch objects)\ncollection = client.collections.get(\"Article\")\nresponse = collection.query.fetch_objects(\n    limit=10,\n    return_properties=[\"title\", \"body\"]\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n\n# Semantic search with near_text\nresponse = collection.query.near_text(\n    query=\"artificial intelligence applications\",\n    limit=5\n)\n\n# Search based on vector\nvector = [0.1, 0.2, 0.3, 0.4, 0.5]  # Your vector here\nresponse = collection.query.near_vector(\n    near_vector=vector,\n    limit=5\n)\n\n# Search based on existing object\nresponse = collection.query.near_object(\n    near_object=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",  # UUID of reference object\n    limit=5\n)\n\n# BM25 keyword search\nresponse = collection.query.bm25(\n    query=\"artificial intelligence\",\n    query_properties=[\"title\", \"body\"],\n    limit=5\n)\n\n# Hybrid search (combines semantic and keyword)\nfrom weaviate.classes.query import HybridFusion\n\nresponse = collection.query.hybrid(\n    query=\"artificial intelligence\",\n    alpha=0.5,  # Balance between keyword and vector search\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    limit=5\n)\n\n# Search with filters\nfrom weaviate.classes.query import Filter\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=Filter.by_property(\"title\").like(\"*AI*\"),\n    limit=5\n)\n\n# Complex filtering\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    filters=(\n        Filter.by_property(\"title\").like(\"*AI*\") &\n        (Filter.by_property(\"body\").like(\"*research*\") |\n         Filter.by_property(\"body\").like(\"*innovation*\"))\n    ),\n    limit=5\n)\n\n# Search with groupBy\nfrom weaviate.classes.query import GroupBy\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    group_by=GroupBy(\n        prop=\"category\",\n        objects_per_group=2,\n        number_of_groups=3\n    ),\n    limit=10\n)\n\n# For grouped results\nfor group_name, group_data in response.groups.items():\n    print(f\"Group: {group_name}, Objects: {group_data.number_of_objects}\")\n    for obj in group_data.objects:\n        print(obj.properties)\n\n# Getting metadata with search\nfrom weaviate.classes.query import MetadataQuery\n\nresponse = collection.query.near_text(\n    query=\"artificial intelligence\",\n    return_metadata=MetadataQuery(\n        distance=True,  # Vector distance\n        score=True,     # Relevance score\n        creation_time=True  # When the object was created\n    ),\n    limit=5\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Distance: {obj.metadata.distance}\")\n    print(f\"Score: {obj.metadata.score}\")\n    print(f\"Created: {obj.metadata.creation_time}\")\n\n\n# ===============================\n# 6. GENERATIVE CAPABILITIES\n# ===============================\n# For more information, see the How-to generative search page: https://weaviate.io/developers/weaviate/search/generative\n\n\"\"\"\nUsing generative models with Weaviate\n\"\"\"\n\n# Basic generation\ncollection = client.collections.get(\"Article\")\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article in one sentence: {title} - {body}\",\n    limit=3\n)\n\nfor obj in response.objects:\n    print(obj.properties)\n    print(f\"Generated: {obj.generative.text}\")\n\n# Grouped generation\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    grouped_task=\"Compare and contrast these AI articles\",\n    limit=3\n)\n\nprint(f\"Grouped response: {response.generative.text}\")\n\n# Generation with custom provider\nfrom weaviate.classes.generate import GenerativeConfig\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=\"Summarize this article: {title}\",\n    generative_provider=GenerativeConfig.openai(\n        model=\"gpt-4\",\n        temperature=0.7\n    ),\n    limit=3\n)\n\n# Generation with parameters\nfrom weaviate.classes.generate import GenerativeParameters\n\nprompt = GenerativeParameters.single_prompt(\n    prompt=\"Summarize this article: {title}\",\n    metadata=True,  # Include metadata in response\n    debug=True      # Include debug info\n)\n\nresponse = collection.generate.near_text(\n    query=\"artificial intelligence\",\n    single_prompt=prompt,\n    limit=3\n)\n\nfor obj in response.objects:\n    print(f\"Generated: {obj.generative.text}\")\n    print(f\"Metadata: {obj.generative.metadata}\")\n    print(f\"Debug: {obj.generative.debug}\")\n\n\n# =================================\n# 7. MULTI-TENANCY OPERATIONS\n# =================================\n# For more information, see the How-to multi-tenancy page: https://weaviate.io/developers/weaviate/manage-data/multi-tenancy\n# And the manage tenant data and temperatures page: https://weaviate.io/developers/weaviate/manage-data/tenant-states\n\n\"\"\"\nWorking with multi-tenant collections\n\"\"\"\n\n# Create a multi-tenant collection\nclient.collections.create(\n    \"MultiTenantArticle\",\n    multi_tenancy_config=Configure.multi_tenancy(enabled=True),\n    properties=[\n        Property(name=\"title\", data_type=DataType.TEXT),\n        Property(name=\"body\", data_type=DataType.TEXT),\n    ],\n    vectorizer_config=Configure.Vectorizer.text2vec_openai()\n)\n\nmt_collection = client.collections.get(\"MultiTenantArticle\")\n\n# Add tenants\nfrom weaviate.classes.tenants import Tenant\n\nmt_collection.tenants.create(\n    tenants=[\n        Tenant(name=\"tenant1\"),\n        Tenant(name=\"tenant2\")\n    ]\n)\n\n# Get all tenants\ntenants = mt_collection.tenants.get()\n\n# Get specific tenant\ntenant = mt_collection.tenants.get_by_name(\"tenant1\")\n\n# Use a specific tenant\ntenant1_collection = mt_collection.with_tenant(\"tenant1\")\n\n# Add data to a specific tenant\ntenant1_collection.data.insert({\n    \"title\": \"Tenant 1 Article\",\n    \"body\": \"This belongs to tenant 1\"\n})\n\n# Search within a specific tenant\nresponse = tenant1_collection.query.near_text(\n    query=\"article\",\n    limit=5\n)\n\n\n# ========================\n# 8. ITERATING OVER DATA\n# ========================\n# For more information, see the iterator section of the Python Client library page: https://weaviate.io/developers/weaviate/client-libraries/python#collection-iterator-cursor-api\n\n\"\"\"\nIterating over large datasets\n\"\"\"\n\n# Basic iteration\ncollection = client.collections.get(\"Article\")\nfor article in collection.iterator():\n    print(article.properties)\n\n# Iteration with specific properties\nfor article in collection.iterator(return_properties=[\"title\"]):\n    print(article.properties[\"title\"])\n\n# Iteration with metadata\nfrom weaviate.classes.query import MetadataQuery\n\nfor article in collection.iterator(\n    return_metadata=MetadataQuery(creation_time=True)\n):\n    print(article.properties)\n    print(article.metadata.creation_time)\n\n\n# ========================\n# 9. CLEANUP\n# ========================\n\n# Don't forget to close the client when done\nclient.close()\n\n# END_CODE_EXAMPLES\n",
      "generated_text": "```python\nimport os\nimport weaviate\nfrom weaviate.classes.query import Filter, HybridFusion\n\n# Connect to Weaviate Cloud with API key and OpenAI API key in headers\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=os.environ[\"WCD_TEST_URL\"],\n    auth_credentials=weaviate.AuthApiKey(api_key=os.environ[\"WCD_TEST_KEY\"]),\n    headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]\n    }\n)\n\n# Get the WineReview collection\nwine_collection = client.collections.get(\"WineReview\")\n\n# Build the filter:\n# price < 50 AND points > 90 AND (review_body LIKE \"*spice*\" OR \"*fruit*\" OR \"*berry*\" OR \"*cherry*\" OR \"*honey*\")\nprice_filter = Filter.by_property(\"price\").less_than(50)\npoints_filter = Filter.by_property(\"points\").greater_than(90)\n\n# Substring filters on review_body (case-insensitive LIKE)\n# Weaviate's like filter supports wildcards * for substring matching\nreview_substrings = [\"spice\", \"fruit\", \"berry\", \"cherry\", \"honey\"]\nreview_filters = None\nfor substr in review_substrings:\n    f = Filter.by_property(\"review_body\").like(f\"*{substr}*\")\n    review_filters = f if review_filters is None else (review_filters | f)\n\n# Combine all filters with AND\ncombined_filter = price_filter & points_filter & review_filters\n\n# Perform hybrid search with alpha=0.5, limit=5\nresponse = wine_collection.query.hybrid(\n    query=\"pair with steak\",\n    alpha=0.5,\n    fusion_type=HybridFusion.RELATIVE_SCORE,\n    filters=combined_filter,\n    limit=5,\n    return_properties=[\"title\", \"country\", \"price\", \"points\"]\n)\n\n# Print the results\nfor obj in response.objects:\n    props = obj.properties\n    print(f\"Title: {props.get('title')}\")\n    print(f\"Country: {props.get('country')}\")\n    print(f\"Price: {props.get('price')}\")\n    print(f\"Points: {props.get('points')}\")\n    print(\"-\" * 40)\n\n# Close client connection when done\nclient.close()\n```\n",
      "stdout": "Title: Sol\u00e9na 2009 Guadalupe Vineyard Pinot Noir\nCountry: US\nPrice: 40.0\nPoints: 92\n----------------------------------------\nTitle: Bink 2014 Pinot Noir (Anderson Valley)\nCountry: US\nPrice: 49.0\nPoints: 91\n----------------------------------------\nTitle: Do\u00f1a Silvina 2011 Malbec (Mendoza)\nCountry: Argentina\nPrice: 27.0\nPoints: 91\n----------------------------------------\nTitle: Dobog\u00f3 2011 Szent Tam\u00e1s Betsek Vineyards  (Tokaji)\nCountry: Hungary\nPrice: 25.0\nPoints: 93\n----------------------------------------\nTitle: Ch\u00e2teau Rauzan-S\u00e9gla 2012  Margaux\nCountry: France\nPrice: 0.0\nPoints: 94\n----------------------------------------\n",
      "stderr": "/usr/local/lib/python3.9/site-packages/weaviate/__init__.py:145: DeprecationWarning: Dep010: Importing AuthApiKey from weaviate is deprecated. Import AuthApiKey from its module: weaviate.auth\n  _Warnings.root_module_import(name, map_[name])\n",
      "exit_code": 0
    }
  }
}